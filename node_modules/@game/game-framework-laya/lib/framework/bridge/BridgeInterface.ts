enum BridgeType {
  //h5
  h5,
  //美团
  titansX,
  //小游戏
  minigame,
  //小程序
  miniprogram
}

enum ShareType {
  close = -1,
  miniprogram = 0,
  h5 = 1,
  command = 2
}

interface BridgeInterface {
  /**
   * 初始化
   * setBridge时调用
   */
  init();
  /**
   * 返回桥的类型
   */
  getBridgeType();

  /**
   * 获取系统信息
   */
  getSystemInfo(object: {
    success?: (res?: wx.systemInfo) => void;
    fail?: (err?: any) => void;
  });

  /**
   * 返回启动选项
   */
  getLaunchOptionsSync(): wx.launchOption;

  /**
   * 设置调用openPage时url被转换成的美团url前缀
   * 默认值为'imeituan'
   * @param imeituanUrlPrefix
   */
  setOpenPageUrlImeituanPrefix(imeituanUrlPrefix: string);

  /**
   * 新打开一个页面（从新界面返回后会回到当前界面）
   * @param object
   * url:跳转链接
   * query: 只有url为http开头时才有效
   * option: 扩展参数
   *    imeituanTransform默认值为true，跳转链接会转为imeituan
   *    imeituanUrlPrefix一般情况不需要传，受setOpenPageUrlImeituanPrefix控制
   * returnCallback：返回到当前界面执行的事件
   */
  openPage(object: {
    url: string;
    query?: {
      notitlebar?: 1 | 0;
      wkwebview?: 1;
      singleton?: number;
    };
    option?: {
      imeituanTransform?: boolean;
      imeituanUrlPrefix?: string;
      tabBar?: boolean;
    };
    returnCallback?: (res?: any) => void;
  });

  /**
   * 打开新页面替换当前页面（从新界面返回后会回到当前界面的上一级）
   * 这个接口存在兼容性问题：在11.15.200以下版本会出现新界面返回后先看到当前界面然后自动关闭回到上一级的情况；11.15.200以上版本支持会比较好
   * @param object
   * url:跳转链接
   * query: 只有url为http开头时才有效
   * option: 扩展参数
   *    imeituanTransform默认值为true，跳转链接会转为imeituan
   *    imeituanUrlPrefix一般情况不需要传，受setOpenPageUrlImeituanPrefix控制
   *
   */
  replacePage(object: {
    url: string;
    query?: {
      notitlebar?: 1 | 0;
      wkwebview?: 1;
      singleton?: number;
    };
    option?: {
      imeituanTransform?: boolean;
      imeituanUrlPrefix?: string;
      tabBar?: boolean;
    };
  });

  /**
   * 退出当前小游戏
   */
  exitMiniProgram();

  /**
   * 获取当前的地理位置、速度。当用户离开小程序后，此接口无法调用；当用户点击“显示在聊天顶部”时，此接口可继续调用。
   * @param object timout默认200ms 不建议修改
   */
  getLocation(object: {
    type?: string;
    timeout?: number;
    sceneToken?: string;
    success?: (res: {
      latitude: number;
      longitude: number;
      speed?: number;
      accuracy?: number;
      altitude?: number;
      verticalAccuracy?: number;
      horizontalAccuracy?: number;
    }) => void;
    fail?: (res?: any) => void;
  });

  /**
   * 绑定微信
   * @param callback 成功或者失败会回调这个方法
   */
  bindWechat(callback: (isSuccess: boolean, data: any) => void);

  /**
   * 监听小游戏隐藏到后台事件。锁屏、按 HOME 键退到桌面、显示在聊天顶部等操作会触发此事件。
   * @param callback 满足条件时会触发该方法
   */
  onHide(callback: () => void);

  /**
   * 取消监听小游戏隐藏到后台事件。锁屏、按 HOME 键退到桌面、显示在聊天顶部等操作会触发此事件。
   * @param callback 取消该方法的监听
   */
  offHide(callback: () => void);

  /**
   * 监听小游戏回到前台的事件
   * @param callback 满足条件时会触发该方法
   */
  onShow(
    callback: (res: {
      /** 场景值*/
      scene: string;
      /** 查询参数*/
      query: Record<string, any>;
      /** shareTicket*/
      shareTicket: string;
      /** 当场景为由从另一个小程序或公众号或App打开时，返回此字段*/
      referrerInfo?: wx.ReferrerInfo;
    }) => void
  );

  /**
   * 取消监听小游戏回到前台的事件
   * @param callback 取消该方法的监听
   */
  offShow(callback: () => void);

  /**
   * 开启全局关闭按钮的监听事件
   * 当监听事件存在时
   * @param callback 满足条件时会触发该方法
   */
  onBeforeClosePage(callback: () => void);

  /**
   * 取消监听小游戏回到前台的事件
   * @param callback 取消该方法的监听
   */
  offBeforeClosePage(callback: () => void);

  /**
   * 设置存储
   * @param key 存储key
   * @param value 存储值
   * @param level 存储级别，0 - 内存【默认】，1 - 设备，2 - 云端【11.7 暂缓】
   */
  setStorage(key: string, value: string);

  /**
   * 返回存储
   * @param key 存储key
   * @param callback 拉取结果回调
   */
  getStorage(key: string): string;

  /**
   * 移除存储
   * @param key 存储key
   */
  removeStorage(key: string);

  /**
   * 分享
   * @param object 分享参数
   */
  share(object: wx.ShareObject);

  /**
   * 跳转到设置
   * @param object
   */
  openAppSetting(object: { returnCallback?: () => void });

  /**
   * 请求设备权限, 如果没有权限则跳转到设置
   * @param object
   */
  requestPermission(object: {
    type:
      | 'reminder'
      | 'notification'
      | 'location'
      | 'contact'
      | 'storage'
      | 'microphone'
      | 'camera';
    forceJump: boolean;
    success?: Function;
    fail?: Function;
  });

  /**
   * 结束骨架屏的显示
   */
  hideLaunchScreen(object?: {
    success?: (res?: any) => void;
    fail?: (res?: any) => void;
  });

  /**
   * 手机短震动
   */
  vibrateShort(object?: {
    type?: 'heavy' | 'medium' | 'light';
    success?: (res?: any) => void;
    fail?: (res?: any) => void;
  });

  /**
   * 手机长震动
   */
  vibrateLong(object?: {
    success?: (res?: any) => void;
    fail?: (res?: any) => void;
  });

  setKeepScreenOn(object?: {
    keepScreenOn: boolean;
    success?: (res?: any) => void;
    fail?: (res?: any) => void;
  });

  /**
   * 广播事件
   * [游戏框架内部调用]
   * @param type
   * @param data
   */
  event(type: string, data?: any): boolean;

  /**
   * 强制小程序重启并使用新版本。在小程序新版本下载完成后调用。
   */
  applyUpdate(): void;
}

export { BridgeType, ShareType, BridgeInterface };
