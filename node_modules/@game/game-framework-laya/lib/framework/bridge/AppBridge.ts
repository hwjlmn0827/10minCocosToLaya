import DataDevice from '../data/DataDevice';
import LoggerUtil from '../util/LoggerUtil';
import Singleton from '../util/Singleton';
import { BridgeInterface } from './BridgeInterface';

/**
 * 业务桥
 * 通过统一的接口调用调用原生实现
 */
export default class AppBridge extends Singleton implements BridgeInterface {
  private bridge: BridgeInterface;

  public setBridge(bridge: BridgeInterface) {
    this.bridge = bridge;
    this.init();
  }

  public init() {
    this.bridge.init();
  }

  public getBridgeType() {
    return this.bridge.getBridgeType();
  }

  public getSystemInfo(object: {
    success?: (res?: wx.systemInfo) => void;
    fail?: (err?: any) => void;
  }) {
    this.bridge.getSystemInfo({
      success: (res?: wx.systemInfo) => {
        LoggerUtil.getInstance().info('[AppBridge] getSystemInfo', res);
        let mergeRes: wx.systemInfo = {
          SDKVersion: res.SDKVersion,
          brand: res.brand,
          model: res.model,
          pixelRatio: res.pixelRatio,
          platform: res.platform,
          screenHeight: res.screenHeight,
          screenWidth: res.screenWidth,
          statusBarHeight: res.statusBarHeight,
          system: res.system,
          version: res.version,
          windowHeight: res.windowHeight,
          windowWidth: res.windowWidth,
          gameVersion: res.gameVersion,
          uuid: res.uuid,
          fingerprint: res.fingerprint,
          cityId: res.cityId,
          localId: res.localId,
          deviceId: res.deviceId,
          imei: res.imei,
          idfa: res.idfa,
          idfv: res.idfv,
          appId: res.appId,
          appName: res.appName,
          preview: res.preview,
          language: res.language,
          fontSizeSetting: res.fontSizeSetting,
          benchmarkLevel: res.benchmarkLevel,
          albumAuthorized: res.albumAuthorized,
          locationAuthorized: res.locationAuthorized,
          cameraAuthorized: res.cameraAuthorized,
          microphoneAuthorized: res.microphoneAuthorized,
          notificationAuthorized: res.notificationAuthorized,
          bluetoothEnabled: res.bluetoothEnabled,
          locationEnabled: res.locationEnabled,
          wifiEnabled: res.wifiEnabled,
          appType: res.appType
        };
        DataDevice.getInstance().mergeData(mergeRes);
        if (object.success) {
          object.success(res);
        }
      },
      fail: (err?: any) => {
        if (object.fail) {
          object.fail(err);
        }
      }
    });
  }

  public getLaunchOptionsSync(): wx.launchOption {
    return this.bridge.getLaunchOptionsSync();
  }

  public setOpenPageUrlImeituanPrefix(imeituanUrlPrefix: string) {
    this.bridge.setOpenPageUrlImeituanPrefix(imeituanUrlPrefix);
  }

  public openPage(object: {
    url: string;
    query?: {
      notitlebar?: 1 | 0;
      wkwebview?: 1;
      singleton?: number;
    };
    option?: {
      imeituanTransform?: boolean;
      imeituanUrlPrefix?: string;
      tabBar?: boolean;
    };
    returnCallback?: (res?: any) => void;
  }) {
    this.bridge.openPage(object);
  }

  public replacePage(object: {
    url: string;
    query?: {
      notitlebar?: 1 | 0;
      wkwebview?: 1;
      singleton?: number;
    };
    option?: {
      imeituanTransform?: boolean;
      imeituanUrlPrefix?: string;
      tabBar?: boolean;
    };
  }) {
    this.bridge.replacePage(object);
  }

  public exitMiniProgram(): void {
    this.bridge.exitMiniProgram();
  }

  public getLocation(object: {
    type?: string;
    timeout?: number;
    sceneToken?: string;
    success?: (res: {
      latitude: number;
      longitude: number;
      speed?: number;
      accuracy?: number;
      altitude?: number;
      verticalAccuracy?: number;
      horizontalAccuracy?: number;
    }) => void;
    fail?: (res?: any) => void;
  }) {
    this.bridge.getLocation(object);
  }

  public bindWechat(callback: (isSuccess: boolean, object: any) => void) {
    this.bridge.bindWechat(callback);
  }

  public onHide(callback: () => void): void {
    this.bridge.onHide(callback);
  }

  public offHide(callback: () => void): void {
    this.bridge.offHide(callback);
  }

  public onShow(
    callback: (res: {
      scene: string;
      query: Record<string, any>;
      shareTicket: string;
      referrerInfo?: wx.ReferrerInfo;
    }) => void
  ): void {
    this.bridge.onShow(callback);
  }

  public offShow(callback: () => void) {
    this.bridge.offShow(callback);
  }

  public onBeforeClosePage(callback: () => void) {
    this.bridge.onBeforeClosePage(callback);
  }

  public offBeforeClosePage(callback: () => void) {
    this.bridge.offBeforeClosePage(callback);
  }

  public setStorage(key: string, value: string) {
    this.bridge.setStorage(key, value);
  }

  public getStorage(key: string): string {
    return this.bridge.getStorage(key);
  }

  public removeStorage(key: string) {
    this.bridge.removeStorage(key);
  }

  public getSwimlane() {
    const launchOption = this.getLaunchOptionsSync();
    return launchOption.query['sl'];
  }

  public share(object: wx.ShareObject) {
    this.bridge.share(object);
  }

  public openAppSetting(object: { returnCallback?: () => void }) {
    this.bridge.openAppSetting(object);
  }

  public requestPermission(object: {
    type:
      | 'reminder'
      | 'notification'
      | 'location'
      | 'contact'
      | 'storage'
      | 'microphone'
      | 'camera';
    forceJump: boolean;
    success?: Function;
    fail?: Function;
  }) {
    this.bridge.requestPermission(object);
  }

  public hideLaunchScreen() {
    this.bridge.hideLaunchScreen();
  }

  public vibrateShort(object?: {
    type: 'heavy' | 'medium' | 'light';
    success?: (res?: any) => void;
    fail?: (res?: any) => void;
  }) {
    this.bridge.vibrateShort(object);
  }

  public vibrateLong(object?: {
    success?: (res?: any) => void;
    fail?: (res?: any) => void;
  }) {
    this.bridge.vibrateLong(object);
  }

  public setKeepScreenOn(object?: {
    keepScreenOn: boolean;
    success?: (res?: any) => void;
    fail?: (res?: any) => void;
  }) {
    this.bridge.setKeepScreenOn(object);
  }

  event(type: string, data?: any): boolean {
    return this.bridge.event(type, data);
  }

  public applyUpdate(): void {
    this.bridge.applyUpdate();
  }
}
