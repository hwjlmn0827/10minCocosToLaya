/**
 * 配置解析
 */

import LoggerUtil from "./LoggerUtil";
import Singleton from "./Singleton";


export default class ConfigUtil extends Singleton {

  private _configDicts: any = {};

  private _configFolder: string = 'json';

  /**
   * 设置配置文件夹
   * @param configFolder 配置文件夹，默认文件夹为json
   */
  public setConfigFolder(configFolder: string){
    this._configFolder = configFolder;
  }

  /**
   * 获得配置Map的数据
   * @param configName 配置名称
   */
  public getConfigDict(configName: string): any {
    if (this._configDicts[configName]){
      return this._configDicts[configName];
    } 
    return null;
  }

  /**
   * 得到配置Map指定键对应的值
   * @param configName 配置名称
   * @param key 配置键
   */
  public getConfigDictValue(configName: string, key: number|string): any {
    if (this._configDicts[configName]) {
      return this._configDicts[configName][key.toString()];
    }
    return null;
  }

  /**
   * 异步加载配置，并转换为配置Map
   * @param configName 配置名称
   * @param option 附加参数
   */
  public loadConfigDictAsync(configName: string, option?:{
    key?:string
    folder?:string
  }): Promise<any> {
    return new Promise((resolve, reject) => {
      if (this._configDicts[configName]) {
        resolve(this._configDicts[configName]);
      }else{
        if(!option){
          option = {}
        }
        let key = option.key ? option.key : 'id'; 
        let folder = option.folder ? option.folder : this._configFolder;
        this.loadConfig(configName, folder).then((configData)=>{
          let configDict;
          if(configData instanceof Array){
            configDict = {};
            for(let i=0;i<configData.length;i++){
              let configValue = configData[i];
              let dictKey = configValue[key];
              if(dictKey == null){
                LoggerUtil.getInstance().warn(`[ConfigUtl] loadConfigDictAsync configData[${i}][${key}] null`);
              }else{
                configDict[dictKey.toString()] = configValue;
              }
            }
          }else{
            configDict = configData;
          }
          this._configDicts[configName] = configDict;
          resolve(configDict);
        }).catch(()=>{
          reject();
        })
      }
    });
  }

  /**
   * 加载配置
   * @param configName 配置名称
   */
  private loadConfig(configName: string, folder: string): Promise<any> {
    //加载本地配置
    let url;
    if(folder){
      url = `${folder}/${configName}.json`;
    }else{
      url = `${configName}.json`;
    }
    return new Promise((resolve, reject) => {
      Laya.loader.load(
        url,
        Laya.Handler.create(this, res => {
          if (res) {
            resolve(res);
          } else {
            reject();
          }
        })
      );
    });
  }
}
