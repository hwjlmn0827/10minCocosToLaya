import { equal } from './functions';
import LoggerUtil from './LoggerUtil';
import Singleton from './Singleton';

/**
 * 埋点封装类
 * 包装灵犀SDK
 */
export default class AnalyticsUtil extends Singleton {
  private cid: string;
  private pvParam: object;
  private pvStartTime: number;
  private isLastUploadPd: boolean;
  private publicParam: any;
  private category: string = 'game';
  private logEnabled: boolean = true;

  constructor() {
    super();
    this.publicParam = {};
  }

  /**
   * 开启日志
   * @param enabled
   */
  public setLogEnabled(enabled) {
    this.logEnabled = enabled;
  }

  /**
   * 设置灵犀全局category
   * @param category
   */
  public setCategory(category: string) {
    this.category = category;
    if (process.env.minigame) {
      this.upload('setCategory', category);
    }
  }

  /**
   * 设置公共参数Object
   * @param publicParam
   */
  public setPublicParam(publicParam: any) {
    this.publicParam = publicParam;
  }

  /**
   * 上传pv事件
   * @param param
   * @param cid
   */
  public uploadPageViewEvent(cid: string, param?: object) {
    if (
      this.isLastUploadPd === false &&
      equal(cid, this.cid) &&
      equal(param, this.pvParam)
    ) {
      return;
    }
    this.adapterPageDisappearEvent();
    this.cid = cid;
    this.pvParam = param;
    this.pvStartTime = new Date().getTime();
    let custom = Object.assign({}, this.publicParam || {});
    if (param) {
      Object.assign(custom, param);
    }
    let valLab = {
      custom: custom
    };
    this.upload('pageView', valLab, {}, cid);
    this.isLastUploadPd = false;
  }

  /**
   * 上传mv事件
   * @param bid
   * @param valLabObject
   * @param optionObject
   */
  public uploadModuleViewEvent(
    bid: string,
    valLabObject?: object,
    optionObject?: object
  ) {
    let valLab = Object.assign({}, this.publicParam || {});
    if (valLabObject) {
      Object.assign(valLab, valLabObject);
    }
    let option = {
      cid: this.cid
    };
    if (optionObject) {
      Object.assign(option, optionObject);
    }
    this.upload('moduleView', bid, valLab, option);
  }

  /**
   * 上传mc事件
   * @param bid
   * @param valLabObject
   * @param optionObject
   */
  public uploadModuleClickEvent(
    bid: string,
    valLabObject?: object,
    optionObject?: object
  ) {
    let valLab = Object.assign({}, this.publicParam || {});
    if (valLabObject) {
      Object.assign(valLab, valLabObject);
    }
    let option = {
      cid: this.cid
    };
    if (optionObject) {
      Object.assign(option, optionObject);
    }
    this.upload('moduleClick', bid, valLab, option);
  }

  /**
   * 上传tag事件
   * @param bid
   * @param valLabObject
   */
  public uploadTagEvent(bid: string, valLabObject?: object) {
    let valLab = Object.assign(
      {
        bid: bid
      },
      this.publicParam || {}
    );
    if (valLabObject) {
      Object.assign(valLab, valLabObject);
    }
    let key = this.cid;
    this.upload('tag', this.category, {
      [key]: valLab
    });
  }

  /**
   * 适配PV
   * [框架内部调用]
   */
  public adapterPageViewEvent() {
    if (this.cid) {
      this.uploadPageViewEvent(this.cid, this.pvParam);
    }
  }

  public adapterPageDisappearEvent() {
    if (this.cid && this.isLastUploadPd === false) {
      let duration = new Date().getTime() - this.pvStartTime;
      if (duration < 0) {
        duration = 0;
      }
      this.uploadPageDisappearEvent({
        duration: duration
      });
      this.isLastUploadPd = true;
    }
  }

  private uploadPageDisappearEvent(param: object) {
    let valLab = Object.assign(param, this.publicParam || {});
    let option = {
      cid: this.cid
    };
    this.upload('pageDisappear', valLab, option);
  }

  private upload(...args) {
    if (this.logEnabled) {
      LoggerUtil.getInstance().info('[AnalyticsUtil] upload', ...args);
    }
    if (window['LXAnalytics']) {
      LXAnalytics.apply(null, Array.prototype.slice.call(arguments, 0));
    }
  }
}
