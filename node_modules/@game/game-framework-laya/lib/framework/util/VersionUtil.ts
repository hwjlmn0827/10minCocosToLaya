import LoggerUtil from './LoggerUtil';
import Singleton from './Singleton';

/**
 * 设备处理类
 */
export default class VersionUtil extends Singleton {
  /**
   * 比较版本号的大小
   * v1>v2返回1  相等返回0 否则返回-1
   * @param v1 版本号1  如9.12.300
   * @param v2 版本号2
   */
  public compareVersion(v1: string, v2: string): number {
    if (!this.versionValidate(v1) || !this.versionValidate(v2)) {
      return -1;
    }

    var s1 = this.versionSplit(v1);
    var s2 = this.versionSplit(v2);

    for (var i = 0; i < Math.max(s1.length - 1, s2.length - 1); i++) {
      var n1 = parseInt(s1[i] || '0', 10);
      var n2 = parseInt(s2[i] || '0', 10);

      if (n1 > n2) return 1;
      if (n2 > n1) return -1;
    }

    var sp1 = s1[s1.length - 1];
    var sp2 = s2[s2.length - 1];

    if (sp1 && sp2) {
      var p1 = sp1.split('.').map(this.tryParse);
      var p2 = sp2.split('.').map(this.tryParse);

      for (i = 0; i < Math.max(p1.length, p2.length); i++) {
        if (
          p1[i] === undefined ||
          (typeof p2[i] === 'string' && typeof p1[i] === 'number')
        )
          return -1;
        if (
          p2[i] === undefined ||
          (typeof p1[i] === 'string' && typeof p2[i] === 'number')
        )
          return 1;

        if (p1[i] > p2[i]) return 1;
        if (p2[i] > p1[i]) return -1;
      }
    } else if (sp1 || sp2) {
      return sp1 ? -1 : 1;
    }

    return 0;
  }

  private indexOrEnd(str: string, q: string) {
    return str.indexOf(q) === -1 ? str.length : str.indexOf(q);
  }

  private versionSplit(v: string): string[] {
    var c = v.replace(/^v/, '').replace(/\+.*$/, '');
    var patchIndex = this.indexOrEnd(c, '-');
    var arr = c.substring(0, patchIndex).split('.');
    arr.push(c.substring(patchIndex + 1));
    return arr;
  }

  private tryParse(v: any) {
    return isNaN(Number(v)) ? v : Number(v);
  }

  private versionValidate(version: string) {
    var semver = /^v?(?:\d+)(\.(?:[x*]|\d+)(\.(?:[x*]|\d+)(\.(?:[x*]|\d+))?(?:-[\da-z\-]+(?:\.[\da-z\-]+)*)?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i;
    if (typeof version !== 'string') {
      LoggerUtil.getInstance().error('[VersionUtil] versionValidate version error');
      return false;
    }
    if (!semver.test(version)) {
      LoggerUtil.getInstance().error(
        '[VersionUtil] versionValidate test error'
      );
      return false;
    }
    return true;
  }
}
