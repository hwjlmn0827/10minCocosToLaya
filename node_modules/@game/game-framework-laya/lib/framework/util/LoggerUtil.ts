import LoganUtil from './LoganUtil';
import Singleton from './Singleton';

/**
 * 日志管理类
 * info, warn, error方法会在任何环境都会输出
 * log, color 方法在非线上环境或者 调试模式下会输出
 */
export default class LoggerUtil extends Singleton {

  private env: string;
  private devEnabled: boolean = false;

  /**
   * 设置环境
   * @param env test或者production
   */
  public setEnv(env: string) {
    this.env = env;
  }

  /**
   * 开启调试模式
   * @param env test或者production
   */
  public setDevEnabled(isDevEnabled: boolean){
    this.devEnabled = isDevEnabled;
  }

  /**
   * 输出普通日志
   * 线上环境 非调试模式 不输出
   * @param args 日志数组
   */
  public log(...args: any[]): void {
    if(this.env == 'production' && !this.devEnabled){
      return
    }
    this.executeConsole('log', args);
  }

  /**
   * 输出信息日志
   * @param args 日志数组
   */
  public info(...args: any[]): void {
    this.executeConsole('info', args);
  }

  /**
   * 输出警告日志
   * @param args 日志数组
   */
  public warn(...args: any[]): void {
    this.executeConsole('warn', args);
  }

  /**
   * 输出错误日志
   * @param args 日志数组
   */
  public error(...args: any[]): void {
    this.executeConsole('error', args);
  }

  /**
   * 输出带颜色的日志
   * @param args 日志数组
   */
  public colorInfo(
    color: 'red' | 'green' | 'blue' | 'orange' | 'violet',
    ...args: any[]
  ): void {
    if (process.env.minigame) {
      this.executeConsole('info', args);
    }else{
      if (process.env.env == 'production' || process.env.gameBuild != '0') {
        this.executeConsole('info', args);
      }else{
        let msg: string = this.getString(args);
        console.info('%c' + msg, 'color:' + color);
        LoganUtil.getInstance().log(msg);
      }
    }
  }

  /**
   * 输出带颜色的日志
   * 线上环境不输出
   * @param args 日志数组
   */
  public color(
    color: 'red' | 'green' | 'blue' | 'orange' | 'violet',
    ...args: any[]
  ): void {
    if (process.env.minigame) {
      this.executeConsole('log', args);
    }else{
      if (process.env.env == 'production' || process.env.gameBuild != '0') {
        this.executeConsole('log', args);
      }else{
        let msg: string = this.getString(args);
        console.log('%c' + msg, 'color:' + color);
      }
    }
  }

  private executeConsole(api: string, args: any[]): void {
    let handler: Function = console[api];
    if (!handler) return;

    if (process.env.minigame) {
      handler.call(console, this.getString(args));
    } else {
      if (process.env.env != 'production' || (api != 'log' && api != 'info')) {
        handler.apply(console, args);
      }
      if(api != 'log'){
        LoganUtil.getInstance().log(this.getString(args));
      }
    }
  }

  private getString(args: any[]): string {
    let ret = '';
    let arr: string[] = [];
    if (args !== null && args !== undefined) {
      for (let i = 0; i < args.length; i++) {
        let a: any = args[i];
        if (a === null) arr.push('null');
        else if (a === undefined) arr.push('undefined');
        else if (typeof a === 'object') arr.push(JSON.stringify(a));
        else arr.push(a.toString());
      }
    }
    ret = arr.join(' ');
    return ret;
  }
}

