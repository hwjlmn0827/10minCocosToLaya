import Singleton from './Singleton';

/**
 * 时间戳同步类
 *
 */

export default class Timestamp extends Singleton {
  private _localTimestamp: number = 0;

  private _serverTimestamp: number = 0;

  private _loginTimestamp: number = 0;

  private newDayListener: Function;

  /**
   * 设置当前时间戳（毫秒）
   * @param serverTimestamp 服务器时间戳
   */
  public setServerTimestamp(serverTimestamp: number): void {
    Laya.timer.clearAll(this);
    let isSameDay = false;
    if (this._serverTimestamp == 0) {
      this._loginTimestamp = serverTimestamp;
    } else {
      isSameDay = this.isSameDay(
        this._serverTimestamp,
        serverTimestamp
      );
    }
    this._serverTimestamp = serverTimestamp;
    this._localTimestamp = new Date().getTime();
    
    if (!isSameDay && this.newDayListener) {
      this.newDayListener();
    }
  }

  /**
   * 设置新的一天到来时候的执行回调方法（此方法依赖于setServerTimestamp的调用）
   * 常用来处理0点的签到刷新等逻辑
   * @param listener 
   */
  public setNewDayListener(listener: Function){
    this.newDayListener = listener;
  }

  /**
   * 返回当前客户端时间对应的服务器端时间戳（毫秒）
   */
  public now(): number {
    return new Date().getTime() + this._serverTimestamp - this._localTimestamp;
  }

  /**
   * 返回当前客户端时间戳对应的服务器日期
   */
  public nowDate(): Date {
    let nowTimestamp = this.now();
    return new Date(nowTimestamp);
  }

  /**
   * 返回指定的服务器时间戳距离现在是多少毫秒之前
   */
  public beforeNow(targetServerTimestamp: number): number {
    return this.now() - targetServerTimestamp;
  }

  /**
   * 返回指定的服务器时间戳距离现在是多少毫秒之后
   */
  public afterNow(targetServerTimestamp: number): number {
    return targetServerTimestamp - this.now();
  }

  /**
   * 返回服务器时间戳（毫秒）
   */
  public getServerTimestamp() {
    return this._serverTimestamp;
  }

  /**
   * 返回时间戳（毫秒）
   */
  public getLoginTimestamp() {
    return this._loginTimestamp;
  }

  /**
   * 比较日期
   * 默认不比较时分秒
   * @param date1
   * @param date2
   * @param compareTime 是否比较时分秒
   */
  public compareDate(date1: Date, date2: Date, compareTime: boolean = false) {
    if (compareTime) {
      let timestamp1 = date1.getTime();
      let timestamp2 = date2.getTime();
      if (timestamp1 < timestamp2) {
        return -1;
      }
      if (timestamp1 > timestamp2) {
        return 1;
      }
      return 0;
    }
    let year1 = date1.getFullYear();
    let month1 = date1.getMonth();
    let dt1 = date1.getDate();

    let year2 = date2.getFullYear();
    let month2 = date2.getMonth();
    let dt2 = date2.getDate();
    if (year1 > year2) {
      return 1;
    }
    if (year1 < year2) {
      return -1;
    }
    if (month1 > month2) {
      return 1;
    }
    if (month1 < month2) {
      return -1;
    }
    if (dt1 > dt2) {
      return 1;
    }
    if (dt1 < dt2) {
      return -1;
    }
    return 0;
  }

  /**
   * 比较日期
   * 默认不比较时分秒
   * @param 时间戳1
   * @param 时间戳2
   * @param isSameDay 是否是同一天
   */
  public isSameDay(time1:number, time2:number): boolean {
    let date1 = new Date(time1);
    let date2 = new Date(time2);
    let ret = false;
    let offsetDay = this.compareDate(date1, date2);
    if (offsetDay == 0) {
      ret = true;
    }
    return ret;
  }
}
