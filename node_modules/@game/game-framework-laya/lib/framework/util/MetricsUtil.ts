import LoggerUtil from './LoggerUtil';
import Singleton from './Singleton';

export default class MetricsUtil extends Singleton {

  private jsStartTime: number = 0;

  private _isReportLoginSuccess: boolean = false;

  private autoEnabled:boolean = true;

  private logEnabled: boolean = true;  

  /**
   * 设置是否开启自动打点上报
   * 开启后会在关键时间中自动打点
   * @param enabled 
   */
  public setAutoEnabled(enabled: boolean){
    this.autoEnabled = enabled;
  }

  /**
   * 开启日志
   * @param enabled 
   */
  public setLogEnabled(enabled){
    this.logEnabled = enabled;
  }

  /**
   * [框架内部调用]
   * 返回自动日志记录是否开启
   */
  public isAutoEnabled(){
    return this.autoEnabled;
  }

  /**
   * 上报登录成功事件
   */
  public reportLoginSuccess(){
    this._isReportLoginSuccess = true;
    this.reportPerformance('game.login', 1, {
      success: 1
    });
  }

  /**
   * 上报登录失败事件
   */
  public reportLoginFail(){
    this.reportPerformance('game.login', 1);
  }

  /**
   * 上报异常对话框事件
   * @param reason 异常原因
   */
  public reportErrorDialog(reason: string){
    this.reportPerformance('game.errorDialog', 1, {
      errorReason: reason
    });
  }

  /**
   * 上报FCP时间点
   */
  public reportFCP(){
    this.reportPerformance('game.firstscreen', new Date().getTime() - this.jsStartTime);
  }

  /**
   * 上报FMP时间点
   */
  public reportFMP(){
    this.reportPerformance('game.fmp', new Date().getTime() - this.jsStartTime);
  }

  /**
   * 上报TTI时间点
   */
  public reportTTI(){
    this.reportPerformance('game.tti', new Date().getTime() - this.jsStartTime);
  }

  /**
   * 上报pike接口时延
   * @param option {type: pike请求类型，duration: 接口时延，isSuccess: 成功还是失败}
   */
  public reportPikeRequest(option: {
    type:number, duration:number, isSuccess:boolean
  }){
    if(this.logEnabled){
      LoggerUtil.getInstance().info('[MetricsUtil] reportPikeRequest', option);
    }
    if(process.env.minigame){
      if(wx.mta && wx.mta.addRequest){
        let tag = {
          reqType: 'pike', 
          ajaxUrl: option.type,
          httpStatus: option.isSuccess?200:400,
          duration: option.duration
        }
        wx.mta.addRequest(tag);
      }
    }else{
      let value = option.duration? option.duration: 0;
      let tag = {
        type: option.type,
        success: option.isSuccess?1:0,
        duration: option.duration
      }
      this.reportWeb('game.pike', value, tag);
    }
  }

  /**
   * 设置上报的自定义维度信息, 设置后后续的全部日志上报都会携带这些自定义字段
   * @param tag 
   */
  public setTag(tag){
    if(process.env.minigame){
      if(wx.mta && wx.mta.setTag){
        wx.mta.setTag(tag);
      }
    }
  }

  /**
   * setAutoReportEnabled(true)后会自动调用
   * js语句开始执行时调用
   */
  jsStart(){
    if(this.jsStartTime === 0){
      this.jsStartTime = new Date().getTime();
    }
  }

  /**
   * setAutoReportEnabled(true)后会自动调用
   * 上报登录退出事件
   */
  reportLoginExit(){
    this.reportPerformance('game.loginExit', 1);
  }

  /**
   * setAutoReportEnabled(true)后会自动调用
   * 上报跳出事件
   * jumpType:share | openPage
   */
  reportJumpOut(jumpType:string){
    this.reportPerformance('game.jumpOut', 1,{jumpType});
  }

  /**
   * setAutoReportEnabled(true)后会自动调用
   * 上报跳入事件 
   */
   reportJumpIn(jumpType:string){
    this.reportPerformance('game.jumpIn', 1,{jumpType});
  }

  /**
   * [游戏框架内部使用]
   * 是否已经报告登录成功
   */
  isReportLoginSuccess(){
    return this._isReportLoginSuccess;
  }

  /**
   * 上报自定义事件
   * @param type 
   * @param value 
   * @param tag 
   */
  public reportPerformance(type: string, value: number, tag?){
    if(this.logEnabled){
      LoggerUtil.getInstance().info('[MetricsUtil] reportPerformance', type, value, tag);
    }
    if(process.env.minigame){
      if(wx.mta && wx.mta.reportPerformance){
        wx.mta.reportPerformance(type, value, tag);
      }
    }else{
      this.reportWeb(type, value, tag);
    }
  }

  private reportWeb(type: string, value: number, tag?){
    if(process.env.compile_web_perf && window['perf']){
      window['perf']('reportPerformance', 'web.' + type, value, tag);
    }
  }
}

