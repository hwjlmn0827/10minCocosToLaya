import { LoginSDKInterface, LoginType } from './LoginSDKInterface';
import Singleton from '../util/Singleton';
import AppBridge from '../bridge/AppBridge';

/**
 * 登录SDK
 * 统一的接口封装
 */
export default class LoginSDK extends Singleton implements LoginSDKInterface {
  private sdk: LoginSDKInterface;

  private mgcId: string;

  private accessToken: string;

  private env: string;

  /**
   * 初始化具体的LoginSDK
   * 此方法会在框架内部调用
   * @param sdk 具体的LoginSDKInterface实现类
   */
  public setSdk(sdk: LoginSDKInterface) {
    this.sdk = sdk;
    this.accessToken = AppBridge.getInstance().getStorage(
      'minigame_accessToken'
    );
  }

  /**
   * 设置环境
   * @param env test或者production
   */
  public setEnv(env: string) {
    this.env = env;
  }

  /**
   * 返回环境
   */
  public getEnv(): string {
    return this.env;
  }

  /**
   * 设置小游戏对应的玩家唯一标识ID
   * @param mgcId 小游戏平台申请的唯一ID
   */
  public setMgcId(mgcId: string) {
    this.mgcId = mgcId;
  }

  /**
   * 返回小游戏对应的玩家唯一标识ID
   * 不存在则为null
   * @param mgcId
   */
  public getMgcId(): string {
    return this.mgcId;
  }

  /**
   * 设置小游戏accessToken
   * 此方法会在框架内部调用
   * @param accessToken 
   */
  public setAccessToken(accessToken: string) {
    this.accessToken = accessToken;
    AppBridge.getInstance().setStorage('minigame_accessToken', accessToken);
  }

  /**
   * 返回小游戏的accessToken
   */
  public getAccessToken(): string {
    return this.accessToken;
  }

  /**
   * 清空小游戏的accessToken
   */
  public removeAccessToken() {
    this.accessToken = null;
    AppBridge.getInstance().removeStorage('minigame_accessToken');
  }

  /**
   * 执行SDK登录流程
   * @param loginType 登录类型
   * @param callback 回调函数
   */
  login(
    loginType: LoginType,
    callback: (isSuccess: boolean, object: any) => void,
    options?: {
      forceLogin?: boolean;
    }
  ): void {
    this.sdk.login(loginType, callback, options);
  }
}
