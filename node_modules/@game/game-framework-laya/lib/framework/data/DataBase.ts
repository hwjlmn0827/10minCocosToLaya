import EventDispatcher from '../message/EventDispatcher';
import { equal } from '../util/functions';

/**
 * 数据解析类型
 */
enum DataParseType {
  //整体替换
  replace,
  //差值合并
  merge
}

/**
 * 数据类基类
 * 一般用于服务器数据存储，与服务器返回数据tag一一对应
 * 也可以用于一般数据存储
 */
class DataBase extends EventDispatcher {
  protected _data: any;

  protected _isExpire: boolean;

  protected _eventUpdateEnabled: boolean;

  protected _parseType: number;

  protected _updateCheckEqual: boolean;

  protected _responseKey: string;

  constructor() {
    super();
    this.setBacktracingEnabled(true);
    this._data = {};
    this._isExpire = false;
    this._eventUpdateEnabled = true;
    this._updateCheckEqual = true;
    this._parseType = DataParseType.replace;
  }

  /**
   * 设置网络映射的监听键
   * @param key 唯一键 用于与服务器同步数据
   */
  public setResponseKey(key: string) {
    this._responseKey = key;
  }

  /**
   * 返回网络映射的监听键
   */
  public getResponseKey() {
    return this._responseKey;
  }

  /**
   * 数据是否存在
   */
  public isExist() {
    return Object.keys(this._data).length > 0;
  }

  /**
   * 数据是否有效
   */
  public isValid() {
    let isExist = this.isExist();
    if (isExist) {
      return !this._isExpire;
    }
    return false;
  }

  /**
   * 设置数据是否过期
   * @param isExpire 是否过期
   */
  public setExpire(isExpire) {
    this._isExpire = isExpire;
  }

  /**
   * 当数据变化时是否发送事件
   * @param isEnable
   */
  public setEventUpdateEnabled(isEnable: boolean) {
    this._eventUpdateEnabled = isEnable;
  }
  
  /**
   * 重置数据
   */
  public restore() {
    this._data = {};
    this._isExpire = false;
    this.onRestore();
  }

  /**
   * 广播update消息
   */
  public eventUpdate() {
    this.executeUpdate(false);
  }

  /**
   * 返回实际的服务器数据
   */
  public getData(): any {
    return this._data;
  }

  /**
   * 替换数据
   * @param data
   */
  public replaceData(data: any) {
    this.setExpire(false);
    if (!this._updateCheckEqual || !equal(this._data, data)) {
      this._data = data;
      this.executeUpdate(true);
    }
  }

  /**
   * 合并数据
   * @param data
   */
  public mergeData(data: any) {
    this.setExpire(false);
    if (!this._updateCheckEqual || !equal(this._data, data)) {
      for (const key in data) {
        this._data[key] = data[key];
      }
      this.executeUpdate(true);
    }
  }

  /**
   * 解析服务器数据
   * @param severData 服务器数据
   */
  public parse(severData: any) {
    if (severData && severData.data) {
      let d = severData.data[this._responseKey];
      if (d) {
        if(this._parseType == DataParseType.replace){
          this.replaceData(d);
        }else{
          this.mergeData(d);
        }
      }
    }
  }

  /**
   * 设置广播onUpdate消息前是否检查数据有变化
   * @param updateCheckEqual 
   */
  public setUpdateCheckEqual(updateCheckEqual:boolean){
    this._updateCheckEqual = updateCheckEqual;
  }

  /**
   * 设置解析数据类型：支持整体替换及差值合并
   * 默认数据类型为整体替换
   * @param parseType 
   */
  public setParseType(parseType: DataParseType){
    this._parseType = parseType;
  }

  /**
   * 当数据更新时回调
   */
  onUpdate() {}

  /**
   * 当数据重置时回调
   */
  onRestore() {}

  private eventOnUpdate(){
    this.event('onUpdate', this._data);
  }

  private executeUpdate(executeOnUpdate?: boolean) {
    if(executeOnUpdate){
      this.onUpdate();
    }
    Laya.timer.once(1, this, this.eventOnUpdate);
  }
}

export { DataParseType, DataBase };
