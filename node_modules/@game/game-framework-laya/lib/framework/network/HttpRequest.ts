
import DataManager from '../data/DataManager';
import LoggerUtil from '../util/LoggerUtil';

/**
 * 针对框架封装的http联网类
 */
export default class HttpRequest {
  //超时时间 默认15秒
  public timeout: number = 15000;
  protected _url: string;
  protected _sendUrl: string;
  protected _queryObject: object;
  protected _postObject: object;
  protected _headerObject: object;

  protected _userData: any;
  protected _method: string;
  protected _callbackObjects: CallbackObject[];

  protected _isSendFinish: boolean;
  protected _isDataParseEnabled: boolean;

  /**
   * 构造方法
   * @param url 联网网址
   * @param queryObject 联网参数object
   * @param postObject post联网参数object
   * @param headerObject header联网参数object
   * @param method 联网方法
   */
  constructor(
    url: string,
    queryObject: object,
    postObject: object,
    headerObject: object,
    method: string
  ) {
    this._url = url;
    this._queryObject = queryObject;
    this._postObject = postObject;
    this._headerObject = headerObject;
    this._method = method;
    this._callbackObjects = [];
  }

  /**
   * 设置联网回调执行方法
   * @param caller 调用域、一般是UI对象
   * @param callback 回调方法
   */
  public setResponseCallback(
    caller: any,
    callback: (isSuccess: boolean, data: any, userData?: any) => void
  ): void {
    this._callbackObjects = [
      {
        caller: caller,
        callback: callback
      }
    ];
  }

  public addResponseCallback(
    caller: any,
    callback: (isSuccess: boolean, data: any, userData?: any) => void
  ): void {
    this._callbackObjects.push({
      caller: caller,
      callback: callback
    });
  }

  /**
   * 设置是否启用自动解析数据
   * @param isEnable
   */
  public setDataParseEnabled(isEnable) {
    this._isDataParseEnabled = isEnable;
  }

  /*
   * 将url适配一下再发出
   * 子类可以重写这个方法做业务处理
   * @param url
   */
  protected adapterSendUrl(url: string): string {
    return this._url;
  }

  /**
   * 发送数据请求
   * 目前支持服务器返回json
   */
  public send(): void {
    this._isSendFinish = false;
    this._sendUrl = this.adapterSendUrl(this._url);
    let queryString;
    if (this._queryObject) {
      queryString = this.getQueryStringByObject(this._queryObject);
    }
    if (queryString) {
      this._sendUrl = this._sendUrl + '?' + queryString;
    }

    var httpRequest = new Laya.HttpRequest();
    httpRequest.http.timeout = this.timeout;
    Laya.timer.once(this.timeout + 1000, this, () => {
      this.onResponseCallback(false, null);
    });

    let headers = [];
    for (const key in this._headerObject) {
      if (this._headerObject.hasOwnProperty(key)) {
        const value = this._headerObject[key];
        headers.push(key);
        headers.push(value);
      }
    }
    LoggerUtil.getInstance().colorInfo('orange', '[HttpRequest] send', {
      url: this._sendUrl,
      post: this._postObject
    });

    httpRequest.once(Laya.Event.COMPLETE, this, this.onComplete);
    httpRequest.once(Laya.Event.ERROR, this, this.onError);
    httpRequest.send(
      this._sendUrl,
      this._postObject ? JSON.stringify(this._postObject) : null,
      this._method,
      'json',
      headers.length > 0 ? headers : null
    );
  }

  /**
   * 将参数object转成string
   * @param params 参数object
   */
  protected getQueryStringByObject(params: object): string {
    let str = '';
    for (const key in params) {
      if (params.hasOwnProperty(key)) {
        str = str + key + '=' + encodeURIComponent(params[key]) + '&';
      }
    }
    if (str.length > 0) {
      str = str.substr(0, str.length - 1);
    }
    return str;
  }

  /**
   * 设置用户数据
   * @param userData 用户数据
   */
  public setUserData(userData: any): void {
    this._userData = userData;
  }

  /**
   * 返回用户数据
   */
  public getUserData(): void {
    return this._userData;
  }

  public getUrl(): string {
    return this._url;
  }

  /**
   * 统一的回调通知
   * @param isSuccess 是否联网成功
   * @param data 服务器的数据
   */
  protected onResponseCallback(isSuccess: boolean, data: any): void {
    LoggerUtil.getInstance().colorInfo('orange',
      '[HttpRequest] onResponseCallback',
      data ? JSON.stringify(data) : ''
    );

    Laya.timer.clearAll(this);
    if (this._callbackObjects.length > 0 && !this._isSendFinish) {
      for (let i = 0; i < this._callbackObjects.length; i++) {
        let callbackObject = this._callbackObjects[i];
        let responseCallback = callbackObject.callback;
        let caller = callbackObject.caller;
        responseCallback.call(caller, isSuccess, data, this._userData);
      }
      this._isSendFinish = true;
    }
  }

  /**
   * 定义是否判定为联网成功
   * 派生类可以自己实现
   * @param data 服务器数据
   */
  protected isResponseDataSuccess(data: object) {
    return data == null ? false : true;
  }

  protected onComplete(data: object): void {
    if (this._isDataParseEnabled) {
      DataManager.getInstance().parse(data);
    }
    if (this.isResponseDataSuccess(data)) {
      this.onResponseCallback(true, data);
    } else {
      this.onResponseCallback(false, data);
    }
  }

  protected onError(data: object): void {
    this.onResponseCallback(false, {});
  }
}
