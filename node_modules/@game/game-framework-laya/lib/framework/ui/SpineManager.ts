import LoggerUtil from '../util/LoggerUtil';
import Singleton from '../util/Singleton';

export default class SpineManager extends Singleton {
  private templetMap: Map<string, Laya.Templet|Laya.SpineTemplet>;
  private templetStateMap: Map<string, number>;
  private logEnabled: boolean = true;

  constructor() {
    super();
    this.templetMap = new Map<string, Laya.Templet|Laya.SpineTemplet>();
    this.templetStateMap = new Map<string, number>();
  }

  /**
   * 开启日志
   * @param enabled 
   */
  public setLogEnabled(enabled){
    this.logEnabled = enabled;
  }

  /**
   * 使用动画模板技术加载一个spine动画或者龙骨动画
   * 注意：动画格式必须为sk格式
   * @param spineUrl
   * @param aniMode 动画模式，0:不支持换装,1,2支持换装
   */
  public loadSkeletonAsync(spineUrl:string, aniMode:number = 0) {
    return new Promise((resolve: (value: Laya.Skeleton) => void, reject) => {
      this.loadTempletAsync(spineUrl)
        .then((templet: Laya.Templet) => {
          let skeleton = templet.buildArmature(aniMode);
          resolve(skeleton);
        })
        .catch(() => {
          reject();
        });
    });
  }

  /**
   * 加载一个spine模板或者龙骨模板
   * 可以用这个模板创建多个spine或者龙骨动画
   * 注意：动画格式必须为sk格式
   * @param spineUrl
   */
  public loadTempletAsync(spineUrl:string) {
    return new Promise((resolve: (value: Laya.Templet) => void, reject) => {
      if (!spineUrl) {
        LoggerUtil.getInstance().error('[SpineManager] loadTempletAsync spineUrl error!');
        reject();
      }
      let templet: Laya.Templet = this.templetMap.get(spineUrl) as Laya.Templet;
      let completeHandler, errorHandler;
      completeHandler = () => {
        if(this.logEnabled){
          LoggerUtil.getInstance().log('[SpineManager] loadTempletAsync complete', spineUrl);
        }
        this.templetStateMap.set(spineUrl, 1);
        if (errorHandler) {
          templet.off(Laya.Event.ERROR, this, errorHandler);
        }
        resolve(templet);
      };
      errorHandler = () => {
        LoggerUtil.getInstance().error('[SpineManager] loadTempletAsync error', spineUrl);
        this.templetMap.delete(spineUrl);
        this.templetStateMap.delete(spineUrl);
        if (completeHandler) {
          templet.off(Laya.Event.COMPLETE, this, completeHandler);
        }
        if (templet && templet.getTexture('')) {
          templet.destroy();
          templet = null;
        }
        reject();
      };

      if (!templet) {
        templet = new Laya.Templet();
        this.templetMap.set(spineUrl, templet);
        templet.loadAni(spineUrl);
        templet.once(Laya.Event.COMPLETE, this, completeHandler);
        templet.once(Laya.Event.ERROR, this, errorHandler);
      } else {
        if ( this.templetStateMap.get(spineUrl) == 1) {
          if(this.logEnabled){
            LoggerUtil.getInstance().log('[SpineManager] loadTempletAsync byCache', spineUrl);
          }
          resolve(templet);
        } else {
          templet.once(Laya.Event.COMPLETE, this, completeHandler);
          templet.once(Laya.Event.ERROR, this, errorHandler);
        }
      }
    });
  }

  /**
   * 新版本spine技术
   * 使用动画模板技术加载一个spine动画，需要在config里将newSpine设置为true
   * 注意：动画格式必须为json格式
   * @param spineUrl
   */
  public loadNewSpineSkeletonAsync(spineUrl:string){
    return new Promise((resolve: (value:Laya.SpineSkeleton) => void, reject) => {
      this.loadNewSpineTempletAsync(spineUrl)
        .then((templet: Laya.SpineTemplet) => {
          let skeleton = templet.buildArmature();
          resolve(skeleton);
        })
        .catch(() => {
          reject();
        });
    });
  }

  /**
   * 新版本spine技术
   * 加载一个spine模板
   * 可以用这个模板创建多个spine动画
   * 注意：动画格式必须为json格式
   * @param spineUrl
   */
  public loadNewSpineTempletAsync(spineUrl:string){
    return new Promise((resolve: (value: Laya.SpineTemplet) => void, reject) => {
      if (!spineUrl) {
        LoggerUtil.getInstance().error('[SpineManager] loadNewSpineTempletAsync spineUrl error!');
        reject();
      }
      let templet: Laya.SpineTemplet = this.templetMap.get(spineUrl) as Laya.SpineTemplet;
      let completeHandler, errorHandler;
      completeHandler = () => {
        if(this.logEnabled){
          LoggerUtil.getInstance().log('[SpineManager] loadNewSpineTempletAsync complete', spineUrl);
        }
        this.templetStateMap.set(spineUrl, 1);
        if (errorHandler) {
          templet.off(Laya.Event.ERROR, this, errorHandler);
        }
        resolve(templet);
      };
      errorHandler = () => {
        LoggerUtil.getInstance().error('[SpineManager] loadNewSpineTempletAsync error', spineUrl);
        this.templetMap.delete(spineUrl);
        this.templetStateMap.delete(spineUrl);
        if (completeHandler) {
          templet.off(Laya.Event.COMPLETE, this, completeHandler);
        }
        if (templet) {
          templet.destroy();
          templet = null;
        }
        reject();
      };

      if (!templet) {
        templet = new Laya.SpineTemplet();
        this.templetMap.set(spineUrl, templet);
        templet.loadAni(spineUrl);
        templet.once(Laya.Event.COMPLETE, this, completeHandler);
        templet.once(Laya.Event.ERROR, this, errorHandler);
      } else {
        if (this.templetStateMap.get(spineUrl) == 1) {
          if(this.logEnabled){
            LoggerUtil.getInstance().log('[SpineManager] loadNewSpineTempletAsync byCache', spineUrl);
          }
          resolve(templet);
        } else {
          templet.once(Laya.Event.COMPLETE, this, completeHandler);
          templet.once(Laya.Event.ERROR, this, errorHandler);
        }
      }
    });
  }



  

  /**
   * 卸载动画模板
   * 注意： 一般情况下不要调用这个方法，spine模板在内存里占用并不高，如果调用这个方法后
   * sk文件需要重新下载
   * @param spineUrl
   */
  public destroyTemplet(spineUrl) {
    if (!spineUrl) {
      LoggerUtil.getInstance().error('destroyTemplet spineUrl error!');
    }
    let templet: Laya.Templet|Laya.SpineTemplet = this.templetMap.get(spineUrl);
    if (templet && !templet.destroyed) {
      templet.offAllCaller(this);
      templet.destroy();
      this.templetMap.delete(spineUrl);
      this.templetStateMap.delete(spineUrl);
    }
  }
}
