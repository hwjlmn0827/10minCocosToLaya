import EventDispatcher from '../message/EventDispatcher';
/**
 * 数据解析类型
 */
declare enum DataParseType {
    replace = 0,
    merge = 1
}
/**
 * 数据类基类
 * 一般用于服务器数据存储，与服务器返回数据tag一一对应
 * 也可以用于一般数据存储
 */
declare class DataBase extends EventDispatcher {
    protected _data: any;
    protected _isExpire: boolean;
    protected _eventUpdateEnabled: boolean;
    protected _parseType: number;
    protected _updateCheckEqual: boolean;
    protected _responseKey: string;
    constructor();
    /**
     * 设置网络映射的监听键
     * @param key 唯一键 用于与服务器同步数据
     */
    setResponseKey(key: string): void;
    /**
     * 返回网络映射的监听键
     */
    getResponseKey(): string;
    /**
     * 数据是否存在
     */
    isExist(): boolean;
    /**
     * 数据是否有效
     */
    isValid(): boolean;
    /**
     * 设置数据是否过期
     * @param isExpire 是否过期
     */
    setExpire(isExpire: any): void;
    /**
     * 当数据变化时是否发送事件
     * @param isEnable
     */
    setEventUpdateEnabled(isEnable: boolean): void;
    /**
     * 重置数据
     */
    restore(): void;
    /**
     * 广播update消息
     */
    eventUpdate(): void;
    /**
     * 返回实际的服务器数据
     */
    getData(): any;
    /**
     * 替换数据
     * @param data
     */
    replaceData(data: any): void;
    /**
     * 合并数据
     * @param data
     */
    mergeData(data: any): void;
    /**
     * 解析服务器数据
     * @param severData 服务器数据
     */
    parse(severData: any): void;
    /**
     * 设置广播onUpdate消息前是否检查数据有变化
     * @param updateCheckEqual
     */
    setUpdateCheckEqual(updateCheckEqual: boolean): void;
    /**
     * 设置解析数据类型：支持整体替换及差值合并
     * 默认数据类型为整体替换
     * @param parseType
     */
    setParseType(parseType: DataParseType): void;
    /**
     * 当数据更新时回调
     */
    onUpdate(): void;
    /**
     * 当数据重置时回调
     */
    onRestore(): void;
    private eventOnUpdate;
    private executeUpdate;
}
export { DataParseType, DataBase };
