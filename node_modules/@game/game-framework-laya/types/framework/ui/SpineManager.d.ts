import Singleton from '../util/Singleton';
export default class SpineManager extends Singleton {
    private templetMap;
    private templetStateMap;
    private logEnabled;
    constructor();
    /**
     * 开启日志
     * @param enabled
     */
    setLogEnabled(enabled: any): void;
    /**
     * 使用动画模板技术加载一个spine动画或者龙骨动画
     * 注意：动画格式必须为sk格式
     * @param spineUrl
     * @param aniMode 动画模式，0:不支持换装,1,2支持换装
     */
    loadSkeletonAsync(spineUrl: string, aniMode?: number): Promise<Laya.Skeleton>;
    /**
     * 加载一个spine模板或者龙骨模板
     * 可以用这个模板创建多个spine或者龙骨动画
     * 注意：动画格式必须为sk格式
     * @param spineUrl
     */
    loadTempletAsync(spineUrl: string): Promise<Laya.Templet>;
    /**
     * 新版本spine技术
     * 使用动画模板技术加载一个spine动画，需要在config里将newSpine设置为true
     * 注意：动画格式必须为json格式
     * @param spineUrl
     */
    loadNewSpineSkeletonAsync(spineUrl: string): Promise<Laya.SpineSkeleton>;
    /**
     * 新版本spine技术
     * 加载一个spine模板
     * 可以用这个模板创建多个spine动画
     * 注意：动画格式必须为json格式
     * @param spineUrl
     */
    loadNewSpineTempletAsync(spineUrl: string): Promise<Laya.SpineTemplet>;
    /**
     * 卸载动画模板
     * 注意： 一般情况下不要调用这个方法，spine模板在内存里占用并不高，如果调用这个方法后
     * sk文件需要重新下载
     * @param spineUrl
     */
    destroyTemplet(spineUrl: any): void;
}
