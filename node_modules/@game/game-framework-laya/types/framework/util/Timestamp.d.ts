import Singleton from './Singleton';
/**
 * 时间戳同步类
 *
 */
export default class Timestamp extends Singleton {
    private _localTimestamp;
    private _serverTimestamp;
    private _loginTimestamp;
    private newDayListener;
    /**
     * 设置当前时间戳（毫秒）
     * @param serverTimestamp 服务器时间戳
     */
    setServerTimestamp(serverTimestamp: number): void;
    /**
     * 设置新的一天到来时候的执行回调方法（此方法依赖于setServerTimestamp的调用）
     * 常用来处理0点的签到刷新等逻辑
     * @param listener
     */
    setNewDayListener(listener: Function): void;
    /**
     * 返回当前客户端时间对应的服务器端时间戳（毫秒）
     */
    now(): number;
    /**
     * 返回当前客户端时间戳对应的服务器日期
     */
    nowDate(): Date;
    /**
     * 返回指定的服务器时间戳距离现在是多少毫秒之前
     */
    beforeNow(targetServerTimestamp: number): number;
    /**
     * 返回指定的服务器时间戳距离现在是多少毫秒之后
     */
    afterNow(targetServerTimestamp: number): number;
    /**
     * 返回服务器时间戳（毫秒）
     */
    getServerTimestamp(): number;
    /**
     * 返回时间戳（毫秒）
     */
    getLoginTimestamp(): number;
    /**
     * 比较日期
     * 默认不比较时分秒
     * @param date1
     * @param date2
     * @param compareTime 是否比较时分秒
     */
    compareDate(date1: Date, date2: Date, compareTime?: boolean): 1 | -1 | 0;
    /**
     * 比较日期
     * 默认不比较时分秒
     * @param 时间戳1
     * @param 时间戳2
     * @param isSameDay 是否是同一天
     */
    isSameDay(time1: number, time2: number): boolean;
}
