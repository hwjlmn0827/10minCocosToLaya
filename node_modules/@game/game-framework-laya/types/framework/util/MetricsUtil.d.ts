import Singleton from './Singleton';
export default class MetricsUtil extends Singleton {
    private jsStartTime;
    private _isReportLoginSuccess;
    private autoEnabled;
    private logEnabled;
    /**
     * 设置是否开启自动打点上报
     * 开启后会在关键时间中自动打点
     * @param enabled
     */
    setAutoEnabled(enabled: boolean): void;
    /**
     * 开启日志
     * @param enabled
     */
    setLogEnabled(enabled: any): void;
    /**
     * [框架内部调用]
     * 返回自动日志记录是否开启
     */
    isAutoEnabled(): boolean;
    /**
     * 上报登录成功事件
     */
    reportLoginSuccess(): void;
    /**
     * 上报登录失败事件
     */
    reportLoginFail(): void;
    /**
     * 上报异常对话框事件
     * @param reason 异常原因
     */
    reportErrorDialog(reason: string): void;
    /**
     * 上报FCP时间点
     */
    reportFCP(): void;
    /**
     * 上报FMP时间点
     */
    reportFMP(): void;
    /**
     * 上报TTI时间点
     */
    reportTTI(): void;
    /**
     * 上报pike接口时延
     * @param option {type: pike请求类型，duration: 接口时延，isSuccess: 成功还是失败}
     */
    reportPikeRequest(option: {
        type: number;
        duration: number;
        isSuccess: boolean;
    }): void;
    /**
     * 设置上报的自定义维度信息, 设置后后续的全部日志上报都会携带这些自定义字段
     * @param tag
     */
    setTag(tag: any): void;
    /**
     * setAutoReportEnabled(true)后会自动调用
     * js语句开始执行时调用
     */
    jsStart(): void;
    /**
     * setAutoReportEnabled(true)后会自动调用
     * 上报登录退出事件
     */
    reportLoginExit(): void;
    /**
     * setAutoReportEnabled(true)后会自动调用
     * 上报跳出事件
     * jumpType:share | openPage
     */
    reportJumpOut(jumpType: string): void;
    /**
     * setAutoReportEnabled(true)后会自动调用
     * 上报跳入事件
     */
    reportJumpIn(jumpType: string): void;
    /**
     * [游戏框架内部使用]
     * 是否已经报告登录成功
     */
    isReportLoginSuccess(): boolean;
    /**
     * 上报自定义事件
     * @param type
     * @param value
     * @param tag
     */
    reportPerformance(type: string, value: number, tag?: any): void;
    private reportWeb;
}
