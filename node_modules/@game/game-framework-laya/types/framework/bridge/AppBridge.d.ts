import Singleton from '../util/Singleton';
import { BridgeInterface } from './BridgeInterface';
/**
 * 业务桥
 * 通过统一的接口调用调用原生实现
 */
export default class AppBridge extends Singleton implements BridgeInterface {
    private bridge;
    setBridge(bridge: BridgeInterface): void;
    init(): void;
    getBridgeType(): any;
    getSystemInfo(object: {
        success?: (res?: wx.systemInfo) => void;
        fail?: (err?: any) => void;
    }): void;
    getLaunchOptionsSync(): wx.launchOption;
    setOpenPageUrlImeituanPrefix(imeituanUrlPrefix: string): void;
    openPage(object: {
        url: string;
        query?: {
            notitlebar?: 1 | 0;
            wkwebview?: 1;
            singleton?: number;
        };
        option?: {
            imeituanTransform?: boolean;
            imeituanUrlPrefix?: string;
            tabBar?: boolean;
        };
        returnCallback?: (res?: any) => void;
    }): void;
    replacePage(object: {
        url: string;
        query?: {
            notitlebar?: 1 | 0;
            wkwebview?: 1;
            singleton?: number;
        };
        option?: {
            imeituanTransform?: boolean;
            imeituanUrlPrefix?: string;
            tabBar?: boolean;
        };
    }): void;
    exitMiniProgram(): void;
    getLocation(object: {
        type?: string;
        timeout?: number;
        sceneToken?: string;
        success?: (res: {
            latitude: number;
            longitude: number;
            speed?: number;
            accuracy?: number;
            altitude?: number;
            verticalAccuracy?: number;
            horizontalAccuracy?: number;
        }) => void;
        fail?: (res?: any) => void;
    }): void;
    bindWechat(callback: (isSuccess: boolean, object: any) => void): void;
    onHide(callback: () => void): void;
    offHide(callback: () => void): void;
    onShow(callback: (res: {
        scene: string;
        query: Record<string, any>;
        shareTicket: string;
        referrerInfo?: wx.ReferrerInfo;
    }) => void): void;
    offShow(callback: () => void): void;
    onBeforeClosePage(callback: () => void): void;
    offBeforeClosePage(callback: () => void): void;
    setStorage(key: string, value: string): void;
    getStorage(key: string): string;
    removeStorage(key: string): void;
    getSwimlane(): any;
    share(object: wx.ShareObject): void;
    openAppSetting(object: {
        returnCallback?: () => void;
    }): void;
    requestPermission(object: {
        type: 'reminder' | 'notification' | 'location' | 'contact' | 'storage' | 'microphone' | 'camera';
        forceJump: boolean;
        success?: Function;
        fail?: Function;
    }): void;
    hideLaunchScreen(): void;
    vibrateShort(object?: {
        type: 'heavy' | 'medium' | 'light';
        success?: (res?: any) => void;
        fail?: (res?: any) => void;
    }): void;
    vibrateLong(object?: {
        success?: (res?: any) => void;
        fail?: (res?: any) => void;
    }): void;
    setKeepScreenOn(object?: {
        keepScreenOn: boolean;
        success?: (res?: any) => void;
        fail?: (res?: any) => void;
    }): void;
    event(type: string, data?: any): boolean;
    applyUpdate(): void;
}
