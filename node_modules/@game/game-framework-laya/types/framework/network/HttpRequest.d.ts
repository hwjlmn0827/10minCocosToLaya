/**
 * 针对框架封装的http联网类
 */
export default class HttpRequest {
    timeout: number;
    protected _url: string;
    protected _sendUrl: string;
    protected _queryObject: object;
    protected _postObject: object;
    protected _headerObject: object;
    protected _userData: any;
    protected _method: string;
    protected _callbackObjects: CallbackObject[];
    protected _isSendFinish: boolean;
    protected _isDataParseEnabled: boolean;
    /**
     * 构造方法
     * @param url 联网网址
     * @param queryObject 联网参数object
     * @param postObject post联网参数object
     * @param headerObject header联网参数object
     * @param method 联网方法
     */
    constructor(url: string, queryObject: object, postObject: object, headerObject: object, method: string);
    /**
     * 设置联网回调执行方法
     * @param caller 调用域、一般是UI对象
     * @param callback 回调方法
     */
    setResponseCallback(caller: any, callback: (isSuccess: boolean, data: any, userData?: any) => void): void;
    addResponseCallback(caller: any, callback: (isSuccess: boolean, data: any, userData?: any) => void): void;
    /**
     * 设置是否启用自动解析数据
     * @param isEnable
     */
    setDataParseEnabled(isEnable: any): void;
    protected adapterSendUrl(url: string): string;
    /**
     * 发送数据请求
     * 目前支持服务器返回json
     */
    send(): void;
    /**
     * 将参数object转成string
     * @param params 参数object
     */
    protected getQueryStringByObject(params: object): string;
    /**
     * 设置用户数据
     * @param userData 用户数据
     */
    setUserData(userData: any): void;
    /**
     * 返回用户数据
     */
    getUserData(): void;
    getUrl(): string;
    /**
     * 统一的回调通知
     * @param isSuccess 是否联网成功
     * @param data 服务器的数据
     */
    protected onResponseCallback(isSuccess: boolean, data: any): void;
    /**
     * 定义是否判定为联网成功
     * 派生类可以自己实现
     * @param data 服务器数据
     */
    protected isResponseDataSuccess(data: object): boolean;
    protected onComplete(data: object): void;
    protected onError(data: object): void;
}
