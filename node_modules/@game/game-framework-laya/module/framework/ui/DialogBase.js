import TouchBlockLayer from './TouchBlockLayer';
import DialogManager from './DialogManager';
import LoggerUtil from '../util/LoggerUtil';
import SceneManager from './SceneManager';
import RainbowConfig from '../rainbow/RainbowConfig';
/**
 * 对话框父类
 */
export default class DialogBase extends Laya.Dialog {
    constructor() {
        super();
        this._isCloseOnSide = true;
        this._isEffectEnabled = true;
        this.autoDestroyAtClosed = true;
        this.maskBgAlpha = RainbowConfig.defaultMaskAlpha;
        this.setCloseOnSide(true);
        this.curShowEffect = this.popupEffect;
        this.curCloseEffect = this.closeEffect;
    }
    /**
     * logan日志上报名字
     * 一般使用类名
     * 需要子类在构造方法中调用
     * @param loganName
     */
    setLoganName(loganName) {
        this.loganName = loganName;
        this.name = loganName;
    }
    /**
     * 设置是否响应点击弹框外部区域
     * @param isCloseOnSide 是否影响
     */
    setCloseOnSide(isCloseOnSide) {
        this._isCloseOnSide = isCloseOnSide;
    }
    /**
     * 设置点击弹框外部区域执行方法
     * @param closeOnSideClickListener 点击弹框外部区域执行方法
     */
    setCloseOnSideClickListener(closeOnSideClickListener) {
        this._closeOnSideClickListener = closeOnSideClickListener;
    }
    /**
     * 返回点击弹框外部区域执行方法
     * @returns
     */
    getCloseOnSideClickListener() {
        return this._closeOnSideClickListener;
    }
    /**
     * 设置对话框显示效果
     * @param showEffect 显示效果
     */
    setShowEffect(showEffect) {
        this.curShowEffect = showEffect;
        this.curShowEffectUserSet = true;
        if (this._isEffectEnabled) {
            this.popupEffect = this.curShowEffect;
        }
    }
    /**
     * 设置对话框关闭效果
     * @param closeEffect 关闭效果
     */
    setCloseEffect(closeEffect) {
        this.curCloseEffect = closeEffect;
        this.curCloseEffectUserSet = true;
        if (this._isEffectEnabled) {
            this.closeEffect = this.curCloseEffect;
        }
    }
    /**
     * 设置成全屏弹框，全屏弹框相比一般弹框有很大性能优化
     *
     */
    setFullScreen() {
        this._isFullScreen = true;
        this.width = Laya.stage.width;
        this.height = Laya.stage.height;
        if (!this.curShowEffectUserSet) {
            this.curShowEffect = DialogManager.getInstance().createDialogDefaultShowEffect(true);
        }
        if (!this.curCloseEffectUserSet) {
            this.curCloseEffect = DialogManager.getInstance().createDialogDefaultCloseEffect(true);
        }
        if (this._isEffectEnabled) {
            this.popupEffect = this.curShowEffect;
            this.closeEffect = this.curCloseEffect;
        }
    }
    /**
     * 是否响应点击弹框外部区域
     */
    isCloseOnSide() {
        return this._isCloseOnSide;
    }
    /**
     * 设置蒙层透明度
     * @param alpha
     */
    setMaskBgAlpha(alpha) {
        Laya.Dialog.manager.maskLayer.alpha = alpha;
        this.maskBgAlpha = alpha;
    }
    /**
     * 返回背景透明度
     * @returns
     */
    getMaskBgAlpha() {
        return this.maskBgAlpha;
    }
    /**
     * 设置是否启用通用弹出关闭效果
     * @param effectEnabled 是否启用通用弹出关闭效果
     */
    setEffectEnabled(effectEnabled) {
        this._isEffectEnabled = effectEnabled;
        if (effectEnabled) {
            this.popupEffect = this.curShowEffect;
            this.closeEffect = this.curCloseEffect;
        }
        else {
            this.popupEffect = null;
            this.closeEffect = null;
            this.pivot(this.width / 2, this.height / 2);
            this.pos(Laya.stage.width / 2, Laya.stage.height / 2);
        }
    }
    /**
     * 关闭弹框
     * @param type
     */
    close(type) {
        if (!this.touchBlockLayer) {
            this.touchBlockLayer = new TouchBlockLayer();
            Laya.stage.addChild(this.touchBlockLayer);
        }
        this.fullScreenExit();
        super.close(type);
    }
    _open(modal, closeOther, showEffect) {
        if (!this.touchBlockLayer) {
            this.touchBlockLayer = new TouchBlockLayer();
            Laya.stage.addChild(this.touchBlockLayer);
        }
        super._open(modal, closeOther, showEffect);
    }
    onOpened(param) {
        super.onOpened(param);
        if (this.touchBlockLayer) {
            this.touchBlockLayer.destroy();
            this.touchBlockLayer = null;
        }
        let manager = Laya.Dialog.manager;
        if (this._isFullScreen) {
            let scene = SceneManager.getInstance().getScene();
            if (scene) {
                scene.visible = false;
            }
            if (manager.numChildren > 0) {
                for (let i = 0; i < manager.numChildren - 2; i++) {
                    let dialog = manager.getChildAt(i);
                    dialog.visible = false;
                }
            }
        }
        if (this.loganName) {
            LoggerUtil.getInstance().info('[DialogBase] onOpened', this.loganName);
        }
        else {
            LoggerUtil.getInstance().warn('[DialogBase] onOpened loganName error!', this.constructor.name);
        }
    }
    onClosed() {
        this.fullScreenExit();
        if (this.touchBlockLayer) {
            this.touchBlockLayer.destroy();
            this.touchBlockLayer = null;
        }
        var manager = Laya.Dialog.manager;
        if (manager.numChildren > 0) {
            let nextDialog = manager.getChildAt(manager.numChildren - 1);
            if (nextDialog instanceof DialogBase) {
                manager.maskLayer.alpha = nextDialog.getMaskBgAlpha();
            }
        }
        DialogManager.getInstance().onDialogClose(this);
        if (this.loganName) {
            LoggerUtil.getInstance().info('[DialogBase] onClosed', this.name || this.constructor.name);
        }
        else {
            LoggerUtil.getInstance().warn('[DialogBase] onClosed loganName error!', this.constructor.name);
        }
        super.onClosed();
    }
    fullScreenExit() {
        if (this._isFullScreen) {
            if (this._isFullScreenExit) {
                return;
            }
            this._isFullScreenExit = true;
            let scene = SceneManager.getInstance().getScene();
            if (scene) {
                scene.visible = true;
            }
            let manager = Laya.Dialog.manager;
            if (manager.numChildren > 0) {
                for (let i = 0; i < manager.numChildren - 1; i++) {
                    let dialog = manager.getChildAt(i);
                    dialog.visible = true;
                }
            }
        }
    }
}
