import Singleton from '../util/Singleton';
/**
 * 对话框管理器
 */
export default class DialogManager extends Singleton {
    constructor() {
        super(...arguments);
        /** 对话框等待弹出队列 */
        this._popWaitQueues = [];
    }
    /**
     * 弹出对话框
     * @param dialog 对话框对象
     * @param isAddQueue 是否加入到等待弹出队列中
     */
    showDialog(dialog, isPopWait = false) {
        let manager = Laya.Dialog.manager;
        if (isPopWait && manager.numChildren > 0) {
            this._popWaitQueues.push(dialog);
        }
        else {
            dialog.popup();
            if (this.dialogShowListener) {
                this.dialogShowListener(dialog.name);
            }
        }
    }
    /**
     * 设置对话框关闭监听方法
     * @param dialogCloseListener 关闭监听方法
     */
    setDialogCloseListener(dialogCloseListener) {
        this.dialogCloseListener = dialogCloseListener;
    }
    /**
     * 设置对话框弹出监听方法
     * @param dialogShowListener 弹出监听方法
     */
    setDialogShowListener(dialogShowListener) {
        this.dialogShowListener = dialogShowListener;
    }
    /**
     * 返回指定名字的对话框
     * @param name 对话框名字
     */
    getDialog(name) {
        let manager = Laya.Dialog.manager;
        if (manager.numChildren > 0) {
            for (let i = manager.numChildren - 1; i >= 0; i--) {
                let dialog = manager.getChildAt(i);
                if (dialog.name == name) {
                    return dialog;
                }
            }
        }
        for (let i = 0; i < this._popWaitQueues.length; i++) {
            let dialog = this._popWaitQueues[i];
            if (dialog.name == name) {
                return dialog;
            }
        }
        return null;
    }
    /**
     * 返回当前显示的对话框的数量
     * @returns
     */
    getDisplayDialogNum() {
        let manager = Laya.Dialog.manager;
        if (manager.numChildren > 0) {
            return manager.numChildren - 1;
        }
        return 0;
    }
    /**
     * 返回处于等待弹出队列的对话框数量
     * @returns
     */
    getPopWaitDialogNum() {
        return this._popWaitQueues.length;
    }
    /* =============================== [游戏框架内部调用] =============================== */
    /**
     * [游戏框架内部调用]
     * 对话框关闭时回调这个方法
     * @param dialog 对话框对象
     */
    onDialogClose(dialog) {
        //相同的框依次弹出
        let manager = Laya.Dialog.manager;
        if (this._popWaitQueues.length > 0 && manager.numChildren <= 1) {
            const dialog = this._popWaitQueues[0];
            dialog.popup();
            this._popWaitQueues.shift();
        }
        if (this.dialogCloseListener) {
            this.dialogCloseListener(dialog.name);
        }
    }
    /**
     * [游戏框架内部调用]
     * 创建对话框默认弹出效果
     * @param isFullScreen 是否为全屏
     */
    createDialogDefaultShowEffect(isFullScreen) {
        let showEffect = new Laya.Handler(Laya.Dialog.manager, function (dialog) {
            dialog.pivot(dialog.width / 2, dialog.height / 2);
            dialog.pos(Laya.stage.width / 2, Laya.stage.height / 2);
            if (!isFullScreen) {
                dialog.scale(0.4, 0.4);
            }
            dialog.alpha = 0;
            Laya.Tween.clearTween(Laya.Dialog.manager.maskLayer);
            Laya.Dialog.manager.maskLayer.alpha = dialog.getMaskBgAlpha();
            Laya.Tween.to(dialog, {
                scaleX: 1,
                scaleY: 1,
                alpha: 1
            }, 350, Laya.Ease.backOut, Laya.Handler.create(Laya.Dialog.manager, Laya.Dialog.manager.doOpen, [
                dialog
            ]), 40);
        });
        return showEffect;
    }
    /**
     * [游戏框架内部调用]
     * 创建对话框默认关闭效果
     * @param isFullScreen 是否为全屏
     */
    createDialogDefaultCloseEffect(isFullScreen) {
        let closeEffect = new Laya.Handler(Laya.Dialog.manager, function (dialog, type) {
            dialog.mouseEnabled = false;
            if (Laya.Dialog.manager.numChildren <= 2) {
                Laya.Tween.to(Laya.Dialog.manager.maskLayer, {
                    alpha: 0
                }, 200);
            }
            let toScale;
            if (isFullScreen) {
                toScale = 1;
            }
            else {
                toScale = 0.5;
            }
            Laya.Tween.to(dialog, {
                scaleX: toScale,
                scaleY: toScale,
                alpha: 0
            }, 280, null, Laya.Handler.create(this, this.doClose, [dialog, type]));
        });
        return closeEffect;
    }
}
