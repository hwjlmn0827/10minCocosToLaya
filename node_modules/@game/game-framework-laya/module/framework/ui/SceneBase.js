import DeviceUtil from '../util/DeviceUtil';
import LoggerUtil from '../util/LoggerUtil';
/**
 * 界面父类
 */
export default class SceneBase extends Laya.Scene {
    constructor() {
        super();
        this.width = Laya.stage.width;
        this.height = Laya.stage.height;
    }
    /**
     * logan日志上报名字
     * 一般使用类名
     * 需要子类在构造方法中调用
     * @param loganName
     */
    setLoganName(loganName) {
        this.loganName = loganName;
    }
    /**
     * 适配背景
     * 适配后背景会自动按比例拉伸扩充到全屏
     * @param bg
     */
    adapterBg(bg, option) {
        let scaleRate;
        let bgWidth;
        let bgHeight;
        if (option) {
            bgWidth = option.bgWidth;
            bgHeight = option.bgHeight;
        }
        else {
            bgWidth = bg.width;
            bgHeight = bg.height;
        }
        if (bg instanceof Laya.UIComponent) {
            bg.centerX = 0;
            bg.centerY = 0;
        }
        if (bgWidth && bgHeight) {
            if (Laya.stage.width > Laya.stage.height) {
                if (Laya.stage.width / Laya.stage.height > bgWidth / bgHeight) {
                    scaleRate = Laya.stage.width / bgWidth;
                }
                else {
                    scaleRate = Laya.stage.height / bgHeight;
                }
            }
            else {
                if (Laya.stage.height / Laya.stage.width > bgHeight / bgWidth) {
                    scaleRate = Laya.stage.height / bgHeight;
                }
                else {
                    scaleRate = Laya.stage.width / bgWidth;
                }
            }
            bg.scaleX = scaleRate;
            bg.scaleY = scaleRate;
        }
        else {
            console.error('[SceneBase] adapterBg cannot parse bg width or height');
        }
    }
    /**
     * 适配刘海
     * 适配后scene的高度会排除刘海的高度*2 垂直居中， scene的bottom和top不再是屏幕的最下或者最上，而是空出了刘海位置
     *
     */
    adapterNotch() {
        let notchLength = DeviceUtil.getInstance().getNotchLength();
        if (Laya.stage.width > Laya.stage.height) {
            if (process.env.miniprogram) {
                this.width = Laya.stage.width - notchLength;
                this.x = 0;
            }
            else {
                this.width = Laya.stage.width - notchLength * 2;
                this.x = notchLength;
            }
        }
        else {
            if (process.env.miniprogram) {
                this.height = Laya.stage.height - notchLength;
                this.y = 0;
            }
            else {
                this.height = Laya.stage.height - notchLength * 2;
                this.y = notchLength;
            }
        }
    }
    onOpened() {
        if (this.loganName) {
            LoggerUtil.getInstance().info('[SceneBase] onOpened', this.loganName);
        }
        else {
            LoggerUtil.getInstance().warn('[SceneBase] onOpened loganName error!', this.constructor.name);
        }
    }
    doClose() { }
    onClosed() {
        if (this.loganName) {
            LoggerUtil.getInstance().info('[SceneBase] onClosed', this.loganName);
        }
        else {
            LoggerUtil.getInstance().warn('[SceneBase] onClosed loganName error!', this.constructor.name);
        }
    }
}
