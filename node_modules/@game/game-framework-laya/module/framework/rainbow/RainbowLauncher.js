import AppBridge from '../bridge/AppBridge';
import DataDevice from '../data/DataDevice';
import DataMgcConfig from '../data/DataMgcConfig';
import LoginSDK from '../login/LoginSDK';
import EventDispatcher from '../message/EventDispatcher';
import HttpRequest from '../network/HttpRequest';
import DialogBase from '../ui/DialogBase';
import DialogManager from '../ui/DialogManager';
import GUIManager from '../ui/GUIManager';
import AnalyticsUtil from '../util/AnalyticsUtil';
import DeviceUtil from '../util/DeviceUtil';
import LoggerUtil from '../util/LoggerUtil';
import MetricsUtil from '../util/MetricsUtil';
import VersionUtil from '../util/VersionUtil';
import RainbowConfig from './RainbowConfig';
import RainbowMessageType from './RainbowMessageType';
export default class RainbowLauncher extends EventDispatcher {
    constructor() {
        super();
        this.setBacktracingEnabled(true);
    }
    static getInstance() {
        if (!this._instance) {
            this._instance = new RainbowLauncher();
        }
        return this._instance;
    }
    sendConfigRequest() {
        let portmProdUrl;
        if (this.useMgcConfig) {
            portmProdUrl =
                process.env.env == 'production'
                    ? 'https://mgc.meituan.com/mgc/gateway/api/v1/config/content/merge/game/get'
                    : 'https://mgcgateway.fe.test.sankuai.com/mgc/gateway/api/v1/config/content/merge/game/get';
        }
        else {
            portmProdUrl =
                process.env.env == 'production'
                    ? 'https://portal-portm.meituan.com/mtgame/config-prod'
                    : 'https://portal-portm.meituan.com/mtgame/config-test';
        }
        let httpRequest = new HttpRequest(portmProdUrl, {
            appId: DataDevice.getInstance().getAppId()
        }, null, null, 'GET');
        httpRequest.setResponseCallback(this, (isSuccess, data) => {
            if (isSuccess) {
                DataMgcConfig.getInstance().mergeData(data.data);
                this.onPortmConfigSuccess();
                this.event(RainbowMessageType.getPortmConfigSuccess);
            }
            else {
                this.event(RainbowMessageType.getPortmConfigFail);
            }
        });
        httpRequest.send();
    }
    onPortmConfigSuccess() {
        if (process.env.minigame && wx.getUpdateManager) {
            let gameVersion = DataDevice.getInstance().getGameVersion();
            let minimumGameVerison = DataMgcConfig.getInstance().getMinimumGameVersion();
            if (gameVersion && minimumGameVerison) {
                if (VersionUtil.getInstance().compareVersion(gameVersion, minimumGameVerison) < 0) {
                    this.backtracingOnce('updateManagerUpdateReady', this, () => {
                        LoggerUtil.getInstance().info('[UpdateManager] onPortmConfigSuccess onUpdateReady');
                        let isExecute = this.event(RainbowMessageType.minimumGameVerisonUpdateReady);
                        if (!isExecute) {
                            if (wx.showModal) {
                                wx.showModal({
                                    title: '更新提示',
                                    content: '版本已更新，请重启游戏',
                                    showCancel: false,
                                    success: res => {
                                        if (res.confirm) {
                                            wx.getUpdateManager().applyUpdate();
                                        }
                                    }
                                });
                            }
                        }
                    });
                }
            }
        }
    }
    init(option) {
        MetricsUtil.getInstance().jsStart();
        RainbowConfig.gameName = option.gameName;
        LoginSDK.getInstance().setEnv(process.env.env);
        LoggerUtil.getInstance().setEnv(process.env.env);
        AnalyticsUtil.getInstance().setCategory(process.env.compile_lxCategory ? process.env.compile_lxCategory : 'game');
        RainbowConfig.width = option.width;
        RainbowConfig.height = option.height;
        RainbowConfig.defaultMaskAlpha =
            option.defaultMaskAlpha === undefined ? 0.7 : option.defaultMaskAlpha;
        UIConfig.popupBgAlpha = RainbowConfig.defaultMaskAlpha;
        Config.useWebGL2 = option.useWebGL2 ? true : false;
        Config.useRetinalCanvas = option.useRetinalCanvas ? true : false;
        //根据IDE设置初始化引擎
        if (window['Laya3D']) {
            Laya3D.init(RainbowConfig.width, RainbowConfig.height);
        }
        else {
            Laya.init(RainbowConfig.width, RainbowConfig.height, Laya['WebGL']);
        }
        Laya['Physics'] && Laya['Physics'].enable();
        Laya['DebugPanel'] && Laya['DebugPanel'].enable();
        Laya.stage.bgColor = option.bgColor ? option.bgColor : '#ffffff';
        Laya.stage.screenMode = 'none';
        Laya.URL.exportSceneToJson = true;
        Laya.Text.defaultFontSize = option.defaultFontSize
            ? option.defaultFontSize
            : 30;
        Laya.Text.defaultFont = option.defaultFont
            ? option.defaultFont
            : 'PingFangSC-Regular';
        Laya.stage.alignH = 'center';
        Laya.stage.alignV = 'middle';
        if (option.scaleMode) {
            Laya.stage.scaleMode = option.scaleMode;
        }
        else {
            let suggestAspectRatio = option.suggestAspectRatio
                ? option.suggestAspectRatio
                : 1.56;
            if (Laya.Browser.width > Laya.Browser.height) {
                if (Laya.Browser.width / Laya.Browser.height < suggestAspectRatio) {
                    Laya.stage.scaleMode = 'fixedwidth';
                }
                else {
                    Laya.stage.scaleMode = 'fixedheight';
                }
            }
            else {
                if (Laya.Browser.height / Laya.Browser.width < suggestAspectRatio) {
                    Laya.stage.scaleMode = 'fixedheight';
                }
                else {
                    Laya.stage.scaleMode = 'fixedwidth';
                }
            }
        }
        LoggerUtil.getInstance().info('[RainbowLauncher] Laya.Browser.width', Laya.Browser.width, 'Laya.Browser.height', Laya.Browser.height, 'Laya.stage.width', Laya.stage.width, 'Laya.stage.height', Laya.stage.height);
        let dialogManager = Laya.Dialog.manager;
        if (option.dialogShowEffect === undefined) {
            dialogManager.popupEffectHandler = DialogManager.getInstance().createDialogDefaultShowEffect();
        }
        if (option.dialogCloseEffect === undefined) {
            dialogManager.closeEffectHandler = DialogManager.getInstance().createDialogDefaultCloseEffect();
        }
        //重写
        dialogManager.maskLayer.offAll();
        dialogManager.maskLayer.on(Laya.Event.CLICK, this, () => {
            let dialog = dialogManager.getChildAt(dialogManager.numChildren - 1);
            if (dialog instanceof DialogBase) {
                if (dialog.isCloseOnSide()) {
                    let closeOnSideClickListener = dialog.getCloseOnSideClickListener();
                    if (closeOnSideClickListener) {
                        closeOnSideClickListener();
                    }
                    dialog.close();
                }
            }
        });
        let appId = process.env.appId;
        if (process.env.minigame) {
            if (GameGlobal.systemInfoCache) {
                DataDevice.getInstance().mergeData(GameGlobal.systemInfoCache);
            }
        }
        else {
            let mockAppId = localStorage.getItem('mock_appId');
            if (mockAppId) {
                appId = mockAppId;
            }
        }
        DataDevice.getInstance().mergeData({
            appId: appId
        });
        LoggerUtil.getInstance().colorInfo('red', '[RainbowLauncher] appId', appId);
        this.initWebpCheck();
        if (process.env.minigame) {
            Laya.MiniAdpter.AutoCacheDownFile = true;
            Laya.MiniAdpter.setNativeBasePath('res/');
            if (process.env.webp) {
                if (this.isSupportWebp) {
                    Laya.MiniAdpter.setNativeFiles(process.env.minigameNativeFileList);
                }
            }
            else {
                Laya.MiniAdpter.setNativeFiles(process.env.minigameNativeFileList);
            }
        }
        let cdn = this.getCDN();
        Laya.URL.basePath = `${cdn}res/`;
        AppBridge.getInstance().setBridge(option.bridge);
        if (option.loginSDK) {
            LoginSDK.getInstance().setSdk(option.loginSDK);
        }
        if (process.env.minigame && wx.getUpdateManager) {
            const updateManager = wx.getUpdateManager();
            updateManager.onCheckForUpdate(function (res) {
                LoggerUtil.getInstance().info('[UpdateManager] onCheckForUpdate res', res);
            });
            updateManager.onUpdateReady(() => {
                LoggerUtil.getInstance().info('[UpdateManager] onUpdateReady');
                this.event('updateManagerUpdateReady');
            });
            updateManager.onUpdateFailed(() => {
                // 新的版本下载失败
                LoggerUtil.getInstance().info('[UpdateManager] onUpdateFailed');
            });
        }
        let lauchOption = AppBridge.getInstance().getLaunchOptionsSync();
        let queryObject = lauchOption.query;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=1参数，均可打开调试面板）
        if (queryObject['debug']) {
            Laya.enableDebugPanel();
            LoggerUtil.getInstance().setDevEnabled(true);
        }
        if (queryObject['PhysicsDebugDraw'] && Laya['PhysicsDebugDraw']) {
            Laya['PhysicsDebugDraw'].enable();
        }
        if (queryObject['stat']) {
            Laya.timer.once(1, this, () => {
                let notchLength = DeviceUtil.getInstance().getNotchLength();
                if (Laya.stage.width > Laya.stage.height) {
                    Laya.Stat.show(notchLength, 0);
                }
                else {
                    Laya.Stat.show(0, notchLength);
                }
            });
        }
        let resourceVersion = process.env.resourceVersion;
        if (process.env.webp && !this.isSupportWebp) {
            Object.keys(resourceVersion).forEach((key) => {
                let value = resourceVersion[key];
                const reg = /-[0-9a-zA-Z]*\.webp$/;
                const reqIndex = value.search(reg);
                if (reqIndex >= 0) {
                    let lastPointIndex = key.lastIndexOf('.');
                    if (lastPointIndex >= 0) {
                        resourceVersion[key] =
                            value.substring(0, reqIndex) +
                                key.substring(lastPointIndex, key.length);
                    }
                }
            });
        }
        LoggerUtil.getInstance().log('[RainbowLauncher] resourceVersion', resourceVersion);
        Laya.ResourceVersion.enable(resourceVersion, Laya.Handler.create(this, () => {
            Laya.AtlasInfoManager.enable(process.env.fileConfig, Laya.Handler.create(this, () => {
                LoggerUtil.getInstance().info('[RainbowLauncher] load finish');
            }));
        }), Laya.ResourceVersion.FILENAME_VERSION);
        let mergeIntoCodeAtlasJsonMap = process.env.mergeIntoCodeAtlasJsonMap;
        Object.keys(mergeIntoCodeAtlasJsonMap).forEach(key => {
            const suffix = key.split('.')[1];
            if (suffix == 'json') {
                LoggerUtil.getInstance().log('[RainbowLauncher] json', key);
                Laya.Loader.cacheRes(key, mergeIntoCodeAtlasJsonMap[key]);
            }
            else if (suffix == 'atlas') {
                let mapKey;
                if (process.env.minigame) {
                    if (cdn) {
                        mapKey = key;
                    }
                    else {
                        mapKey = Laya.URL.formatURL(key);
                    }
                }
                else {
                    mapKey = Laya.URL.formatURL(key);
                }
                LoggerUtil.getInstance().log('[RainbowLauncher] atlas', mapKey);
                Laya.Loader.preLoadedMap[mapKey] = mergeIntoCodeAtlasJsonMap[key];
            }
            else {
                LoggerUtil.getInstance().error('[RainbowLauncher] mergeIntoCodeAtlasJsonMap error', key);
            }
        });
        let hideLaunchScreenDelayTime;
        if (option.hideLaunchScreenDelayTime === undefined) {
            if (process.env.minigame) {
                hideLaunchScreenDelayTime = 10;
            }
            else {
                hideLaunchScreenDelayTime = 100;
            }
        }
        else {
            hideLaunchScreenDelayTime = option.hideLaunchScreenDelayTime;
        }
        Laya.timer.once(hideLaunchScreenDelayTime, this, () => {
            AppBridge.getInstance().hideLaunchScreen();
        });
        if (!process.env.miniprogram && !process.env.minigame) {
            Laya.timer.once(1, this, () => {
                GUIManager.getInstance().showGlobalCloseBtn(option.globalCloseBtn);
            });
        }
        let requestConfig;
        if (option.requestMgcConfig) {
            requestConfig = true;
            this.useMgcConfig = true;
        }
        else {
            requestConfig = option.requestPortmConfig;
        }
        AppBridge.getInstance().getSystemInfo({
            success: res => {
                LoggerUtil.getInstance().info('[RainbowLauncher] getSystemInfo success');
                if (requestConfig) {
                    Laya.timer.once(1500, this, () => {
                        this.sendConfigRequest();
                    });
                }
                this.event(RainbowMessageType.getSystemInfoSuccess);
            },
            fail: err => {
                LoggerUtil.getInstance().error('[RainbowLauncher] getSystemInfo fail');
                this.event(RainbowMessageType.getSystemInfoFail);
            }
        });
        this.event(RainbowMessageType.frameworkInitFinish);
    }
    initWebpCheck() {
        let isSupport = false;
        if (process.env.webp) {
            if (process.env.minigame) {
                if (process.env.wechat) {
                    try {
                        isSupport = wx
                            .createCanvas()
                            .toDataURL('image/webp')
                            .startsWith('data:image/webp');
                    }
                    catch (e) {
                        isSupport = false;
                    }
                }
                else {
                    let sdkVersion = DataDevice.getInstance().getSDKVersion();
                    let platform = DataDevice.getInstance().getPlatform();
                    if (platform == 'android' &&
                        VersionUtil.getInstance().compareVersion(sdkVersion, '11.13.200') ==
                            0) {
                        try {
                            isSupport = wx
                                .createCanvas()
                                .toDataURL('image/webp')
                                .startsWith('data:image/webp');
                        }
                        catch (e) {
                            isSupport = false;
                        }
                    }
                    else if (VersionUtil.getInstance().compareVersion(sdkVersion, '11.13.400') >=
                        0) {
                        isSupport = true;
                    }
                }
            }
            else if (process.env.miniprogram) {
                const ua = window.navigator.userAgent;
                LoggerUtil.getInstance().info('[RainbowLauncher] ua', ua);
                if (ua.indexOf('iPhone') > 0) {
                    try {
                        const version = ua
                            .match(/iPhone OS (\S*)/)[1]
                            .split('_')
                            .join('.');
                        LoggerUtil.getInstance().info('[RainbowLauncher] ios miniprogram version', version);
                        isSupport =
                            VersionUtil.getInstance().compareVersion(version, '14.0.0') >= 0;
                    }
                    catch (err) {
                        isSupport = false;
                    }
                }
                else {
                    isSupport = true;
                }
            }
            else {
                const ua = window.navigator.userAgent;
                LoggerUtil.getInstance().info('[RainbowLauncher] ua', ua);
                if (ua.indexOf('iOS/') > 0) {
                    try {
                        const version = ua.match(/iOS\/(\S*)/)[1];
                        LoggerUtil.getInstance().info('[RainbowLauncher] ios web version', version);
                        isSupport =
                            VersionUtil.getInstance().compareVersion(version, '14.0.0') >= 0;
                    }
                    catch (err) {
                        isSupport = false;
                    }
                }
                else {
                    try {
                        isSupport = document
                            .createElement('canvas')
                            .toDataURL('image/webp', 0.5)
                            .startsWith('data:image/webp');
                    }
                    catch (err) {
                        isSupport = false;
                    }
                }
            }
        }
        LoggerUtil.getInstance().info('[Rainbow] isSupportWebp', isSupport);
        this.isSupportWebp = isSupport;
    }
    getCDN() {
        if (process.env.webp) {
            if (this.isSupportWebp) {
                if (process.env.whole) {
                    return '';
                }
            }
            return process.env.cdn;
        }
        if (process.env.whole) {
            return '';
        }
        return process.env.cdn;
    }
}
