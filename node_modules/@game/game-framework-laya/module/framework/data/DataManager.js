import Singleton from '../util/Singleton';
import LoggerUtil from '../util/LoggerUtil';
/**
 * 数据管理器
 * 管理所有的数据类对象
 */
export default class DataManager extends Singleton {
    constructor() {
        super();
        this._map = new Map();
    }
    /**
     * 返回指定键对应的数据对象
     * @param responseKey 指定键
     */
    getData(responseKey) {
        return this._map.get(responseKey);
    }
    /**
     * 在数据管理器中注册对象
     * @param responseKey 指定键
     * @param data 数据对象
     */
    registerData(responseKey, data) {
        this._map.set(responseKey, data);
        data.setResponseKey(responseKey);
    }
    onParse(callback) {
        this.parseCallback = callback;
    }
    /**
     * 接收到服务器数据进行解析
     * @param data
     */
    parse(data) {
        try {
            if (this.parseCallback) {
                this.parseCallback(data);
            }
            this._map.forEach((dataBase, key) => {
                dataBase.parse(data);
            });
        }
        catch (error) {
            LoggerUtil.getInstance().error('[DataManager] parse data error', error);
        }
    }
}
