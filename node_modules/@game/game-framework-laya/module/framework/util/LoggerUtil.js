import LoganUtil from './LoganUtil';
import Singleton from './Singleton';
/**
 * 日志管理类
 * info, warn, error方法会在任何环境都会输出
 * log, color 方法在非线上环境或者 调试模式下会输出
 */
export default class LoggerUtil extends Singleton {
    constructor() {
        super(...arguments);
        this.devEnabled = false;
    }
    /**
     * 设置环境
     * @param env test或者production
     */
    setEnv(env) {
        this.env = env;
    }
    /**
     * 开启调试模式
     * @param env test或者production
     */
    setDevEnabled(isDevEnabled) {
        this.devEnabled = isDevEnabled;
    }
    /**
     * 输出普通日志
     * 线上环境 非调试模式 不输出
     * @param args 日志数组
     */
    log(...args) {
        if (this.env == 'production' && !this.devEnabled) {
            return;
        }
        this.executeConsole('log', args);
    }
    /**
     * 输出信息日志
     * @param args 日志数组
     */
    info(...args) {
        this.executeConsole('info', args);
    }
    /**
     * 输出警告日志
     * @param args 日志数组
     */
    warn(...args) {
        this.executeConsole('warn', args);
    }
    /**
     * 输出错误日志
     * @param args 日志数组
     */
    error(...args) {
        this.executeConsole('error', args);
    }
    /**
     * 输出带颜色的日志
     * @param args 日志数组
     */
    colorInfo(color, ...args) {
        if (process.env.minigame) {
            this.executeConsole('info', args);
        }
        else {
            if (process.env.env == 'production' || process.env.gameBuild != '0') {
                this.executeConsole('info', args);
            }
            else {
                let msg = this.getString(args);
                console.info('%c' + msg, 'color:' + color);
                LoganUtil.getInstance().log(msg);
            }
        }
    }
    /**
     * 输出带颜色的日志
     * 线上环境不输出
     * @param args 日志数组
     */
    color(color, ...args) {
        if (process.env.minigame) {
            this.executeConsole('log', args);
        }
        else {
            if (process.env.env == 'production' || process.env.gameBuild != '0') {
                this.executeConsole('log', args);
            }
            else {
                let msg = this.getString(args);
                console.log('%c' + msg, 'color:' + color);
            }
        }
    }
    executeConsole(api, args) {
        let handler = console[api];
        if (!handler)
            return;
        if (process.env.minigame) {
            handler.call(console, this.getString(args));
        }
        else {
            if (process.env.env != 'production' || (api != 'log' && api != 'info')) {
                handler.apply(console, args);
            }
            if (api != 'log') {
                LoganUtil.getInstance().log(this.getString(args));
            }
        }
    }
    getString(args) {
        let ret = '';
        let arr = [];
        if (args !== null && args !== undefined) {
            for (let i = 0; i < args.length; i++) {
                let a = args[i];
                if (a === null)
                    arr.push('null');
                else if (a === undefined)
                    arr.push('undefined');
                else if (typeof a === 'object')
                    arr.push(JSON.stringify(a));
                else
                    arr.push(a.toString());
            }
        }
        ret = arr.join(' ');
        return ret;
    }
}
