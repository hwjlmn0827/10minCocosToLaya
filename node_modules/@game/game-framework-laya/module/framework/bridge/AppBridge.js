import DataDevice from '../data/DataDevice';
import LoggerUtil from '../util/LoggerUtil';
import Singleton from '../util/Singleton';
/**
 * 业务桥
 * 通过统一的接口调用调用原生实现
 */
export default class AppBridge extends Singleton {
    setBridge(bridge) {
        this.bridge = bridge;
        this.init();
    }
    init() {
        this.bridge.init();
    }
    getBridgeType() {
        return this.bridge.getBridgeType();
    }
    getSystemInfo(object) {
        this.bridge.getSystemInfo({
            success: (res) => {
                LoggerUtil.getInstance().info('[AppBridge] getSystemInfo', res);
                let mergeRes = {
                    SDKVersion: res.SDKVersion,
                    brand: res.brand,
                    model: res.model,
                    pixelRatio: res.pixelRatio,
                    platform: res.platform,
                    screenHeight: res.screenHeight,
                    screenWidth: res.screenWidth,
                    statusBarHeight: res.statusBarHeight,
                    system: res.system,
                    version: res.version,
                    windowHeight: res.windowHeight,
                    windowWidth: res.windowWidth,
                    gameVersion: res.gameVersion,
                    uuid: res.uuid,
                    fingerprint: res.fingerprint,
                    cityId: res.cityId,
                    localId: res.localId,
                    deviceId: res.deviceId,
                    imei: res.imei,
                    idfa: res.idfa,
                    idfv: res.idfv,
                    appId: res.appId,
                    appName: res.appName,
                    preview: res.preview,
                    language: res.language,
                    fontSizeSetting: res.fontSizeSetting,
                    benchmarkLevel: res.benchmarkLevel,
                    albumAuthorized: res.albumAuthorized,
                    locationAuthorized: res.locationAuthorized,
                    cameraAuthorized: res.cameraAuthorized,
                    microphoneAuthorized: res.microphoneAuthorized,
                    notificationAuthorized: res.notificationAuthorized,
                    bluetoothEnabled: res.bluetoothEnabled,
                    locationEnabled: res.locationEnabled,
                    wifiEnabled: res.wifiEnabled,
                    appType: res.appType
                };
                DataDevice.getInstance().mergeData(mergeRes);
                if (object.success) {
                    object.success(res);
                }
            },
            fail: (err) => {
                if (object.fail) {
                    object.fail(err);
                }
            }
        });
    }
    getLaunchOptionsSync() {
        return this.bridge.getLaunchOptionsSync();
    }
    setOpenPageUrlImeituanPrefix(imeituanUrlPrefix) {
        this.bridge.setOpenPageUrlImeituanPrefix(imeituanUrlPrefix);
    }
    openPage(object) {
        this.bridge.openPage(object);
    }
    replacePage(object) {
        this.bridge.replacePage(object);
    }
    exitMiniProgram() {
        this.bridge.exitMiniProgram();
    }
    getLocation(object) {
        this.bridge.getLocation(object);
    }
    bindWechat(callback) {
        this.bridge.bindWechat(callback);
    }
    onHide(callback) {
        this.bridge.onHide(callback);
    }
    offHide(callback) {
        this.bridge.offHide(callback);
    }
    onShow(callback) {
        this.bridge.onShow(callback);
    }
    offShow(callback) {
        this.bridge.offShow(callback);
    }
    onBeforeClosePage(callback) {
        this.bridge.onBeforeClosePage(callback);
    }
    offBeforeClosePage(callback) {
        this.bridge.offBeforeClosePage(callback);
    }
    setStorage(key, value) {
        this.bridge.setStorage(key, value);
    }
    getStorage(key) {
        return this.bridge.getStorage(key);
    }
    removeStorage(key) {
        this.bridge.removeStorage(key);
    }
    getSwimlane() {
        const launchOption = this.getLaunchOptionsSync();
        return launchOption.query['sl'];
    }
    share(object) {
        this.bridge.share(object);
    }
    openAppSetting(object) {
        this.bridge.openAppSetting(object);
    }
    requestPermission(object) {
        this.bridge.requestPermission(object);
    }
    hideLaunchScreen() {
        this.bridge.hideLaunchScreen();
    }
    vibrateShort(object) {
        this.bridge.vibrateShort(object);
    }
    vibrateLong(object) {
        this.bridge.vibrateLong(object);
    }
    setKeepScreenOn(object) {
        this.bridge.setKeepScreenOn(object);
    }
    event(type, data) {
        return this.bridge.event(type, data);
    }
    applyUpdate() {
        this.bridge.applyUpdate();
    }
}
